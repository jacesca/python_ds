# -*- coding: utf-8 -*-
"""
Created on Fri Sep 27 09:26:27 2019

@author: jacqueline.cortez
source:
    https://jovianlin.io/data-visualization-seaborn-part-1/
    https://github.com/dipanjanS/practical-machine-learning-with-python/tree/master/bonus%20content/effective%20data%20visualization
"""

print("****************************************************")
print("** BEGIN                                          **")
print("****************************************************")
topic = "Importing libraries"; print("** %s\n" % topic)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D

print("****************************************************")
topic = "1. Global user variables"; print("** %s\n" % topic)

SEED=42

print("****************************************************")
topic = "2. Preparing the environment"; print("** %s\n" % topic)

np.random.seed(SEED)
pd.set_option("display.max_columns",20)

print("****************************************************")
topic = "3. Reading data"; print("** %s\n" % topic)

file = 'winequality-red.csv'
df_red_wine   = pd.read_csv(file,   sep=';')
#print('Head of {}:\n{}'.format(file, df_red_wine.head()))

file = 'winequality-white.csv'
df_white_wine = pd.read_csv(file,   sep=';')
#print('Head of {}:\n{}'.format(file, df_red_wine.head()))

print("****************************************************")
topic = "4. Feature engineering"; print("** %s\n" % topic)

df_red_wine['wine_type'] = 'red'   
df_white_wine['wine_type'] = 'white'

print('Red_wine\'s list of "quality":\t', sorted(df_red_wine['quality'].unique()))
print('White_wine\'s list of "quality":\t', sorted(df_white_wine['quality'].unique()))

df_red_wine['quality_label'] = df_red_wine['quality'].apply(lambda value: ('low' if value <= 5 else 'medium') if value <= 7 else 'high')
df_red_wine['quality_label'] = pd.Categorical(df_red_wine['quality_label'], categories=['low', 'medium', 'high'])

df_white_wine['quality_label'] = df_white_wine['quality'].apply(lambda value: ('low' if value <= 5 else 'medium') if value <= 7 else 'high')
df_white_wine['quality_label'] = pd.Categorical(df_white_wine['quality_label'], categories=['low', 'medium', 'high'])

#print('Head of Red_wine:\n{}'.format(df_red_wine.head()))
#print('Head of White_wine:\n{}'.format(df_red_wine.head()))

print("****************************************************")
topic = "5. Merging datasets"; print("** %s\n" % topic)

df_wines = pd.concat([df_red_wine, df_white_wine], axis=0)

# Re-shuffle records just to randomize data points.
# `drop=True`: this resets the index to the default integer index.
df_wines = df_wines.sample(frac=1.0, random_state=42).reset_index(drop=True)
print('Head of Wine dataset:\n{}'.format(df_wines.head()))

print("****************************************************")
topic = "6. Descriptive statistics"; print("** %s\n" % topic)

#First view
subset_attributes = ['residual sugar',        #1
                     'total sulfur dioxide',  #2
                     'sulphates',             #3
                     'alcohol',               #4
                     'volatile acidity',      #5
                     'quality']               #6

rs = round(df_red_wine[subset_attributes].describe(), 2)
#print('Red wine:\n{}'.format(rs))

ws = round(df_white_wine[subset_attributes].describe(), 2)
#print('\nWhite wine:\n{}'.format(ws))

print('First view...')
print(pd.concat([rs, ws], axis=1, 
                keys=['🔴 Red Wine Statistics', 
                      '⚪️ White Wine Statistics']))


#Second view
subset_attributes = ['alcohol', 'volatile acidity', 'pH', 'quality']

ls = round(df_wines[df_wines['quality_label'] == 'low'][subset_attributes].describe(), 2)
ms = round(df_wines[df_wines['quality_label'] == 'medium'][subset_attributes].describe(), 2)
hs = round(df_wines[df_wines['quality_label'] == 'high'][subset_attributes].describe(), 2)

print('\nSecond view...')
print(pd.concat([ls, ms, hs], axis=1, 
                 keys=['👎 Low Quality Wine', 
                       '👌 Medium Quality Wine', 
                       '👍 High Quality Wine']))

print("****************************************************")
topic = "7.1 1D: Univariate Analysis"; print("** %s\n" % topic)

print(df_wines.dtypes)

fig = df_wines.hist(bins=15,
                    color='steelblue',
                    edgecolor='black', linewidth=1.0,
                    xlabelsize=8, ylabelsize=8,
                    xrot=45, yrot=0,
                    figsize=(7,5),
                    grid=False)
plt.tight_layout(rect=(0, 0, 1.5, 1.5))
plt.suptitle(topic)
plt.subplots_adjust(left=None, bottom=0.1, right=None, top=0.9, wspace=None, hspace=1.2)
plt.show() # Show the plot

print("****************************************************")
topic = "7.2 1D: Continuous Numeric Attribute"; print("** %s\n" % topic)

#############################################################
## HISTOGRAM
#############################################################
# Prepare the figure
fig = plt.figure( figsize=(6,4) )
fig.subplots_adjust(top=0.9, wspace=0.3)

# Prepare a subplot
ax = fig.add_subplot(1,1,1) # More info: https://youtu.be/afITiFR6vfw?t=1m53s
ax.set_xlabel("Sulphates")
ax.set_ylabel("Frequency")

# Add text into the subplot
ax.text(x=1.2, y=800,  s=r'$\mu$='+str(round(df_wines['sulphates'].mean(), 2)), fontsize=12)
freq, bins, patches = ax.hist(df_wines['sulphates'], 
                              bins=50, color='darksalmon', edgecolor='darkred', linewidth=1.0)
plt.title("Sulphates Content in Wine (Histogram)", fontsize=14, fontweight='bold')
plt.suptitle(topic)
plt.subplots_adjust(left=None, bottom=0.15, right=None, top=0.8, wspace=None, hspace=None)
plt.show() # Show the plot

#############################################################
## DENSITY PLOT
#############################################################
# Prepare the figure
fig = plt.figure( figsize=(6,4) )
fig.subplots_adjust(top=0.9, wspace=0.3)

# Prepare a subplot
ax1 = fig.add_subplot(111)
ax1.set_xlabel("Sulphates")
ax1.set_ylabel("Density") 

# Annotate: https://matplotlib.org/api/_as_gen/matplotlib.pyplot.annotate.html
ax1.annotate('LOOK HERE!',  xy=(0.5, 3),  xytext=(1.0, 2.0), arrowprops=dict(facecolor='mediumaquamarine')) 

# Seaborn time!
sns.kdeplot(df_wines['sulphates'], 
            ax=ax1, shade=True, color='forestgreen')
plt.title("Sulphates Content in Wine (Density Plot)", fontsize=14, fontweight='bold')
plt.suptitle(topic)
plt.subplots_adjust(left=None, bottom=0.15, right=None, top=0.8, wspace=None, hspace=None)
plt.show() # Show the plot


#############################################################
## Histogram + Density Plot
#############################################################
fig = plt.figure( figsize=(12,4) )
title = fig.suptitle("Sulphates Content in Wine", fontsize=16, fontweight='bold')
fig.subplots_adjust(top=0.88, wspace=0.3)

ax1 = fig.add_subplot(1,2,1)
ax1.set_xlabel("Sulphates")
ax1.set_ylabel("Frequency")
ax1.set(title = 'Histogram')
ax1.text(x=1.2, y=800, 
         s=r'$\mu$='+str(round(df_wines['sulphates'].mean(),2)), fontsize=12)
freq, bins, patches = ax1.hist(df_wines['sulphates'], 
                               bins=40, color='darksalmon', edgecolor='darkred', linewidth=1)
ax2 = fig.add_subplot(1,2,2) 
#ax2 = ax1.twinx() # https://youtu.be/OebyvmZo3w0?t=1m42s
ax2.set_xlabel("Sulphates")
ax2.set_ylabel("Density") 
ax2.set(title = 'Density')
sns.kdeplot(df_wines['sulphates'], ax=ax2, shade=True, color='forestgreen')

# Save Figure #
# fig.savefig('suplhates_content_in_wine_side-by-side.jpg')
plt.suptitle(topic)
plt.subplots_adjust(left=None, bottom=0.15, right=None, top=0.8, wspace=None, hspace=None)
plt.show() # Show the plot

print("****************************************************")
topic = "7.3 1D: Discrete Categorical Attribute"; print("** %s\n" % topic)

w_q = df_wines['quality'].value_counts()
w_q = (list(w_q.index), list(w_q.values))

print( w_q[0] )
print( w_q[1] )

fig = plt.figure(figsize=(6, 4))
fig.subplots_adjust(top=0.9, wspace=0.3)

ax = fig.add_subplot(1,1,1)
ax.set_xlabel("Quality")
ax.set_ylabel("Frequency") 
ax.tick_params(axis='both', which='major', labelsize=8.5)

bar = ax.bar(w_q[0],   # i.e. [6, 5, 7, 4, 8, 3, 9]
             w_q[1], # i.e. [2836, 2138, 1079, 216, 193, 30, 5]
             width=0.85, color='plum',  edgecolor='black', linewidth=1)
plt.title("Wine Quality Frequency", fontsize=14, fontweight='bold')
plt.suptitle(topic)
plt.subplots_adjust(left=None, bottom=0.15, right=None, top=0.8, wspace=None, hspace=None)
plt.show() # Show the plot

print("****************************************************")
print("** END                                            **")
print("****************************************************")