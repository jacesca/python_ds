# Select columns: ev_gen
ev_gen = medals[["Event_gender","Gender"]]

# Drop duplicate pairs: ev_gen_uniques
ev_gen_uniques = ev_gen.drop_duplicates()

# Print ev_gen_uniques
print(ev_gen_uniques)
________________________________________________________
OUT:	
	      Event_gender Gender
	0                M    Men
	348              X    Men
	416              W  Women
	639              X  Women
	23675            W    Men
________________________________________________________
IPYTHONSHELL:

In [1]: medals.shape
	Out[1]: (29216, 10)

In [2]: medals.info()
	<class 'pandas.core.frame.DataFrame'>
	RangeIndex: 29216 entries, 0 to 29215
	Data columns (total 10 columns):
	City            29216 non-null object
	Edition         29216 non-null int64
	Sport           29216 non-null object
	Discipline      29216 non-null object
	Athlete         29216 non-null object
	NOC             29216 non-null object
	Gender          29216 non-null object
	Event           29216 non-null object
	Event_gender    29216 non-null object
	Medal           29216 non-null object
	dtypes: int64(1), object(9)
	memory usage: 2.2+ MB

In [3]: medals.head()
	Out[3]: 
	     City  Edition     Sport Discipline             Athlete  NOC Gender                       Event Event_gender   Medal
	0  Athens     1896  Aquatics   Swimming       HAJOS, Alfred  HUN    Men              100m freestyle            M    Gold
	1  Athens     1896  Aquatics   Swimming    HERSCHMANN, Otto  AUT    Men              100m freestyle            M  Silver
	2  Athens     1896  Aquatics   Swimming   DRIVAS, Dimitrios  GRE    Men  100m freestyle for sailors            M  Bronze
	3  Athens     1896  Aquatics   Swimming  MALOKINIS, Ioannis  GRE    Men  100m freestyle for sailors            M    Gold
	4  Athens     1896  Aquatics   Swimming  CHASAPIS, Spiridon  GRE    Men  100m freestyle for sailors            M  Silver

In [4]: medals["Gender"].unique()
	Out[4]: array(['Men', 'Women'], dtype=object)
		
In [5]: medals["Event_gender"].unique()
	Out[5]: array(['M', 'X', 'W'], dtype=object)
		
In [6]: medals["Gender"].value_counts()
	Out[6]: 
	Men      21721
	Women     7495
	Name: Gender, dtype: int64
		
In [7]: medals["Event_gender"].value_counts()
	Out[7]: 
	M    20067
	W     7278
	X     1871
	Name: Event_gender, dtype: int64
		
In [8]: medals[medals["Event_gender"]=="X"]["Gender"].unique()
	Out[8]: array(['Men', 'Women'], dtype=object)
		
In [9]: medals[medals["Event_gender"]=="X"]["Gender"].value_counts()
	Out[9]: 
	Men      1653
	Women     218
	Name: Gender, dtype: int64
		
In [10]: medals[medals["Event_gender"]=="M"]["Gender"].value_counts()
	Out[10]: 
	Men    20067
	Name: Gender, dtype: int64
		
In [11]: medals[medals["Event_gender"]=="W"]["Gender"].value_counts()
	Out[11]: 
	Women    7277
	Men         1
	Name: Gender, dtype: int64

In [12]: medals[medals["Event_gender"]=="W"][medals["Gender"]=="Men"]
	Out[12]: 
	         City  Edition      Sport Discipline            Athlete  NOC Gender     Event Event_gender   Medal
	23675  Sydney     2000  Athletics  Athletics  CHEPCHUMBA, Joyce  KEN    Men  marathon            W  Bronze
________________________________________________________
INSTRUCTION:

1. Select the columns 'Event_gender' and 'Gender'.
2. Create a dataframe ev_gen_uniques containing the 
   unique pairs contained in ev_gen.
3. Print ev_gen_uniques. This has been done for you, so 
   hit 'Submit Answer' to see the result.
________________________________________________________
GUIDE:

Applying .drop_duplicates()
What could be the difference between the 'Event_gender' 
and 'Gender' columns? You should be able to evaluate 
your guess by looking at the unique values of the pairs 
(Event_gender, Gender) in the data. In particular, you 
should not see something like 
(Event_gender='M', Gender='Women'). 
However, you will see that, strangely enough, there is an 
observation with (Event_gender='W', Gender='Men').

The duplicates can be dropped using the 
.drop_duplicates() method, leaving behind the unique 
observations. The DataFrame has been loaded as medals.
________________________________________________________
DATA SOURCE:

https://www.theguardian.com/sport/datablog/2012/jun/25/olympic-medal-winner-list-data
________________________________________________________
