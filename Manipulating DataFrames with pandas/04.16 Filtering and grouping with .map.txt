import pandas as pd

# Create the Boolean Series: under10
#under10 = pd.Series(titanic["age"] < 10).map({True:"Under 10",False:"over 10"})
under10 = (titanic['age'] < 10).map({True:'under 10', False:'over 10'})

print(under10.head())

# Group by under10 and compute the survival rate
survived_mean_1 = titanic.groupby(under10)["survived"].mean()
print(survived_mean_1)

# Group by under10 and pclass and compute the survival rate
survived_mean_2 = titanic.groupby([under10,"pclass"])["survived"].mean()
print(survived_mean_2)
________________________________________________________
OUT:
	0     over 10
	1    Under 10
	2    Under 10
	3     over 10
	4     over 10
	Name: age, dtype: object


	age
	Under 10    0.609756
	over 10     0.366748
	Name: survived, dtype: float64

	
	age       pclass
	Under 10  1         0.750000
	          2         1.000000
	          3         0.446429
	over 10   1         0.617555
	          2         0.380392
	          3         0.238897
	Name: survived, dtype: float64
________________________________________________________
IPYTHONSHELL:
In [1]: titanic.shape
	Out[1]: (1309, 14)

In [2]: titanic.head()
	Out[2]: 
	   pclass  survived                                             name     sex    age  ...    cabin  embarked boat   body                        home.dest
	0       1         1                    Allen, Miss. Elisabeth Walton  female  29.00  ...       B5         S    2    NaN                     St Louis, MO
	1       1         1                   Allison, Master. Hudson Trevor    male   0.92  ...  C22 C26         S   11    NaN  Montreal, PQ / Chesterville, ON
	2       1         0                     Allison, Miss. Helen Loraine  female   2.00  ...  C22 C26         S  NaN    NaN  Montreal, PQ / Chesterville, ON
	3       1         0             Allison, Mr. Hudson Joshua Creighton    male  30.00  ...  C22 C26         S  NaN  135.0  Montreal, PQ / Chesterville, ON
	4       1         0  Allison, Mrs. Hudson J C (Bessie Waldo Daniels)  female  25.00  ...  C22 C26         S  NaN    NaN  Montreal, PQ / Chesterville, ON
	[5 rows x 14 columns]

In [3]: titanic.info()
	<class 'pandas.core.frame.DataFrame'>
	RangeIndex: 1309 entries, 0 to 1308
	Data columns (total 14 columns):
	pclass       1309 non-null int64
	survived     1309 non-null int64
	name         1309 non-null object
	sex          1309 non-null object
	age          1046 non-null float64
	sibsp        1309 non-null int64
	parch        1309 non-null int64
	ticket       1309 non-null object
	fare         1308 non-null float64
	cabin        295 non-null object
	embarked     1307 non-null object
	boat         486 non-null object
	body         121 non-null float64
	home.dest    745 non-null object
	dtypes: float64(3), int64(4), object(7)
	memory usage: 143.2+ KB

In [4]: titanic.cabin.unique()
	Out[4]: 
	array(['B5', 'C22 C26', 'E12', 'D7', 'A36', 'C101', nan, 'C62 C64', 'B35',
	       'A23', 'B58 B60', 'D15', 'C6', 'D35', 'C148', 'C97', 'B49', 'C99',
	       'C52', 'T', 'A31', 'C7', 'C103', 'D22', 'E33', 'A21', 'B10', 'B4',
	       'E40', 'B38', 'E24', 'B51 B53 B55', 'B96 B98', 'C46', 'E31', 'E8',
	       'B61', 'B77', 'A9', 'C89', 'A14', 'E58', 'E49', 'E52', 'E45',
	       'B22', 'B26', 'C85', 'E17', 'B71', 'B20', 'A34', 'C86', 'A16',
	       'A20', 'A18', 'C54', 'C45', 'D20', 'A29', 'C95', 'E25', 'C111',
	       'C23 C25 C27', 'E36', 'D34', 'D40', 'B39', 'B41', 'B102', 'C123',
	       'E63', 'C130', 'B86', 'C92', 'A5', 'C51', 'B42', 'C91', 'C125',
	       'D10 D12', 'B82 B84', 'E50', 'D33', 'C83', 'B94', 'D49', 'D45',
	       'B69', 'B11', 'E46', 'C39', 'B18', 'D11', 'C93', 'B28', 'C49',
	       'B52 B54 B56', 'E60', 'C132', 'B37', 'D21', 'D19', 'C124', 'D17',
	       'B101', 'D28', 'D6', 'D9', 'B80', 'C106', 'B79', 'C47', 'D30',
	       'C90', 'E38', 'C78', 'C30', 'C118', 'D36', 'D48', 'D47', 'C105',
	       'B36', 'B30', 'D43', 'B24', 'C2', 'C65', 'B73', 'C104', 'C110',
	       'C50', 'B3', 'A24', 'A32', 'A11', 'A10', 'B57 B59 B63 B66', 'C28',
	       'E44', 'A26', 'A6', 'A7', 'C31', 'A19', 'B45', 'E34', 'B78', 'B50',
	       'C87', 'C116', 'C55 C57', 'D50', 'E68', 'E67', 'C126', 'C68',
	       'C70', 'C53', 'B19', 'D46', 'D37', 'D26', 'C32', 'C80', 'C82',
	       'C128', 'E39 E41', 'D', 'F4', 'D56', 'F33', 'E101', 'E77', 'F2',
	       'D38', 'F', 'F G63', 'F E57', 'F E46', 'F G73', 'E121', 'F E69',
	       'E10', 'G6', 'F38'], dtype=object)

In [5]: import numpy as np

In [6]: np.sort(titanic.cabin.fillna("Not value").unique())
	Out[6]: 
	array(['A10', 'A11', 'A14', 'A16', 'A18', 'A19', 'A20', 'A21', 'A23',
	       'A24', 'A26', 'A29', 'A31', 'A32', 'A34', 'A36', 'A5', 'A6', 'A7',
	       'A9', 'B10', 'B101', 'B102', 'B11', 'B18', 'B19', 'B20', 'B22',
	       'B24', 'B26', 'B28', 'B3', 'B30', 'B35', 'B36', 'B37', 'B38',
	       'B39', 'B4', 'B41', 'B42', 'B45', 'B49', 'B5', 'B50',
	       'B51 B53 B55', 'B52 B54 B56', 'B57 B59 B63 B66', 'B58 B60', 'B61',
	       'B69', 'B71', 'B73', 'B77', 'B78', 'B79', 'B80', 'B82 B84', 'B86',
	       'B94', 'B96 B98', 'C101', 'C103', 'C104', 'C105', 'C106', 'C110',
	       'C111', 'C116', 'C118', 'C123', 'C124', 'C125', 'C126', 'C128',
	       'C130', 'C132', 'C148', 'C2', 'C22 C26', 'C23 C25 C27', 'C28',
	       'C30', 'C31', 'C32', 'C39', 'C45', 'C46', 'C47', 'C49', 'C50',
	       'C51', 'C52', 'C53', 'C54', 'C55 C57', 'C6', 'C62 C64', 'C65',
	       'C68', 'C7', 'C70', 'C78', 'C80', 'C82', 'C83', 'C85', 'C86',
	       'C87', 'C89', 'C90', 'C91', 'C92', 'C93', 'C95', 'C97', 'C99', 'D',
	       'D10 D12', 'D11', 'D15', 'D17', 'D19', 'D20', 'D21', 'D22', 'D26',
	       'D28', 'D30', 'D33', 'D34', 'D35', 'D36', 'D37', 'D38', 'D40',
	       'D43', 'D45', 'D46', 'D47', 'D48', 'D49', 'D50', 'D56', 'D6', 'D7',
	       'D9', 'E10', 'E101', 'E12', 'E121', 'E17', 'E24', 'E25', 'E31',
	       'E33', 'E34', 'E36', 'E38', 'E39 E41', 'E40', 'E44', 'E45', 'E46',
	       'E49', 'E50', 'E52', 'E58', 'E60', 'E63', 'E67', 'E68', 'E77',
	       'E8', 'F', 'F E46', 'F E57', 'F E69', 'F G63', 'F G73', 'F2',
	       'F33', 'F38', 'F4', 'G6', 'Not value', 'T'], dtype=object)
________________________________________________________
INSTRUCTION:
1. Create a Boolean Series of titanic['age'] < 10 and 
   call .map with {True:'under 10', False:'over 10'}.
2. Group titanic by the under10 Series and then compute 
   and print the mean of the 'survived' column.
3. Group titanic by the under10 Series as well as the 
   'pclass' column and then compute and print the mean 
   of the 'survived' column.
________________________________________________________
GUIDE:

Filtering and grouping with .map()
You have seen how to group by a column, or by multiple 
columns. Sometimes, you may instead want to group by a 
function/transformation of a column. The key here is 
that the Series is indexed the same way as the DataFrame. 
You can also mix and match column grouping with Series 
grouping.

In this exercise your job is to investigate survival 
rates of passengers on the Titanic by 'age' and 
'pclass'. In particular, the goal is to find out what 
fraction of children under 10 survived in each 'pclass'. 
You'll do this by first creating a boolean array where 
True is passengers under 10 years old and False is 
passengers over 10. You'll use .map() to change these 
values to strings.

Finally, you'll group by the under 10 series and the 
'pclass' column and aggregate the 'survived' column. 
The 'survived' column has the value 1 if the passenger 
survived and 0 otherwise. The mean of the 'survived' 
column is the fraction of passengers who lived.

The DataFrame has been pre-loaded for you as titanic.
________________________________________________________
DATA SOURCE:

http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic.html
________________________________________________________
