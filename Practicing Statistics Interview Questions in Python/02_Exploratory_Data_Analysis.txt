# -*- coding: utf-8 -*-
"""
Created on Sat Mar 21 15:55:22 2020

@author: jacqueline.cortez
Subject: Practicing Statistics Interview Questions in Python
Chapter 2: Exploratory Data Analysis
    In this chapter, you will prepare for statistical concepts related to exploratory data analysis. 
    The topics include descriptive statistics, dealing with categorical variables, and relationships 
    between variables. The exercises will prepare you for an analytical assessment or stats-based 
    coding question.
"""

print("****************************************************")
print("** BEGIN                                          **")
print("****************************************************")
topic = "Importing libraries"; print("** %s\n" % topic)

import math
import matplotlib.pyplot             as plt                                   #For creating charts
import numpy                         as np                                    #For making operations in lists
import pandas                        as pd                                    #For loading tabular data
import seaborn                       as sns                                   #For visualizing data

from sklearn                         import preprocessing
from scipy.stats                     import pearsonr                          #For learning machine. For Pearson's Correlation test. To check if two samples are related.

print("****************************************************")
topic = "Preparing the environment"; print("** %s\n" % topic)

SEED = 123
np.random.seed(SEED)

pd.options.display.float_format = '{:,.4f}'.format

def print_pdf_data(data, title, x_label, bins=-1):
    """Print the PDF of the data."""
    mu = data.mean()
    sigma = data.std()
    median = np.median(data)
    #theorical = np.random.normal(mu,sigma,100000)
    
    title = "{}{}".format(title, ("\nSkewed Left" if (mu < median) else "\nSkewed Right" if (mu > median) else ""))
    bins = (round((data.max() - data.min())*(len(data)**(1/3))/(3.49*sigma)) if bins==-1 else bins)
    sns.set_style('darkgrid')
    plt.figure()
    sns.distplot(data, kde=False, norm_hist=True, bins=bins)
    #sns.distplot(theorical, color='black', hist=False, label='Theorical', hist_kws=dict(edgecolor='k', linewidth=1))
    plt.axvline(x=mu, color='b', label='Mean', linestyle='-', linewidth=2)
    plt.axvline(x=median, color='r', label='Median', linestyle='--', linewidth=2) # Add vertical lines for the median and mean
    plt.xlabel(x_label, fontsize=8); plt.ylabel('Probability (PDF)', fontsize=8); # Labeling the axis.
    plt.xticks(fontsize=8); plt.yticks(fontsize=8);
    plt.legend(loc='best', fontsize='small')
    plt.title(title, color='red')
    plt.suptitle(topic, color='navy');  # Setting the titles.
    plt.subplots_adjust(left=None, bottom=None, right=None, top=0.85, wspace=None, hspace=0.5);
    plt.show()
    plt.style.use('default')
    
    return mu, sigma, median


def print_pearson_coef(serie1, serie2):
    # Compute and print the Pearson correlation
    r = serie1.corr(serie2)
    print("Pearson correlation:", r)
    
    data = pd.concat([serie1, serie2], axis=1).dropna()
    stat, p = pearsonr(data[serie1.name], data[serie2.name])
    print('stat=%.8f, p=%.8f' % (stat, p))

    if p > 0.05:
        print('Probably independent (p > 0.05).')
    else:
        print('Probably dependent (p <= 0.05).')

    # Calculate the r-squared value and print the result
    r2 = r**2
    print("{} explains around {:,.0f}% of the variability in the {} feature.\n".format(serie1.name, r2*100, serie2.name))


    
print("****************************************************")
topic = "2. Mean or median"; print("** %s\n" % topic)

file = "weather-ex-australia.data"
weather = pd.read_fwf(file).sort_index()

columns = ["Temp3pm", "Temp9am"]
for column in columns:
    data = weather[column]
    mean, sigma, median = print_pdf_data(data, title = "Weather in Australia", x_label = column, bins=10)
    
    print("Column: ", column)
    print('  Mean:', mean) # Assign the mean to the variable and print the result
    print('  Median:', median, "\n") # Assign the median to the variable and print the result

    


print("****************************************************")
topic = "3. Standard deviation by hand"; print("** %s\n" % topic)

# Create a sample list
nums = [1, 2, 3, 4, 5]

# Compute the mean of the list
mean = sum(nums) / len(nums)

# Compute the variance and print the std of the list
variance = sum(pow(x - mean, 2) for x in nums) / len(nums)
std = math.sqrt(variance)
print("Standard deviation manually computed   : ", std)

# Compute and print the actual result from numpy
real_std = np.array(nums).std()
print("Standard deviation usign python fuction: ", real_std)




print("****************************************************")
topic = "5. Encoding techniques"; print("** %s\n" % topic)

file = "laptops-prices.data"
laptops = pd.read_fwf(file, index_col="Id").sort_index()

print("Method fo encoding categorival data: LABEL ENCODING")
# Create the encoder and print our encoded new_vals
encoder = preprocessing.LabelEncoder()
new_vals = encoder.fit_transform(laptops.Company)
print(new_vals)

print("Method fo encoding categorival data: ONE HOT ENCODING")
# One-hot encode Company for laptops2
laptops2 = pd.get_dummies(data=laptops, columns=["Company"])
print(laptops2.head())




print("****************************************************")
topic = "6. Exploring laptop prices"; print("** %s\n" % topic)

file = "laptops-prices2.data"
laptops2 = pd.read_fwf(file, index_col="Id").sort_index()

# Get some initial info about the data
print(laptops2.info())

# Produce a countplot of companies
plt.figure()
ax = sns.countplot(laptops2.Company)
plt.title("How many observations are from each brand?", color='red')
plt.suptitle(topic, color='navy');  # Setting the titles.
plt.show()

# Visualize the relationship with price
laptops2.boxplot("Price", "Company", rot=0, figsize=(10,5), vert=False)
plt.gca().set_xticklabels(['{:,.2f}'.format(x) for x in plt.gca().get_xticks()])
plt.xticks(fontsize=8); plt.xlabel('Price in $'); plt.ylabel('Company', rotation=90);
plt.title("Relationship between the Price and Company", color='red')
plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=0.15, bottom=None, right=None, top=0.85, wspace=None, hspace=None);
plt.show()




print("****************************************************")
topic = "8. Types of relationships"; print("** %s\n" % topic)

#file = "weather-dataset-australia.csv" 
#weather_AUS = pd.read_csv(file, index_col="Date", parse_dates=True).sort_index()
file = "weather-ex-australia_4.data"
weather_AUS = pd.read_fwf(file).sort_index()

plt.figure(figsize=(10,5))
# Display a scatter plot and examine the relationship
plt.subplot(2,2,1)
plt.scatter(weather_AUS.MinTemp, weather_AUS.MaxTemp)
plt.xticks(fontsize=8); plt.yticks(fontsize=8); 
plt.xlabel('MinTemp', fontsize=8); plt.ylabel('MaxTemp', fontsize=8);
plt.title("Relationship between MinTemp and MaxTemp\n(Positive Relationship)", color='red', fontsize=9)

# Display a scatter plot and examine the relationship
plt.subplot(2,2,2)
plt.scatter(weather_AUS.MaxTemp, weather_AUS.Humidity9am)
plt.xticks(fontsize=8); plt.yticks(fontsize=8); 
plt.xlabel('MaxTemp', fontsize=8); plt.ylabel('Humidity9am', fontsize=8);
plt.title("Relationship between MaxTemp and Humidity9am\n(Negative Relationship)", color='red', fontsize=9)


# Display a scatter plot and examine the relationship
plt.subplot(2,2,3)
plt.scatter(weather_AUS.MinTemp, weather_AUS.Humidity3pm)
plt.xticks(fontsize=8); plt.yticks(fontsize=8); 
plt.xlabel('MinTemp', fontsize=8); plt.ylabel('Humidity3pm', fontsize=8);
plt.title("Relationship between MinTemp and Humidity3pm\n(No Apparent Relationship)", color='red', fontsize=9)

plt.subplot(2,2,4)
plt.axis('off')

plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0.3, hspace=0.6);
plt.show()




print("****************************************************")
topic = "9. Pearson correlation"; print("** %s\n" % topic)

plt.rc('xtick',labelsize=7)
plt.rc('ytick',labelsize=7)
plt.rcParams["axes.labelsize"] = 7

# Generate the pair plot for the weather dataset
sns.pairplot(weather_AUS, height=1.4, aspect=2, 
             plot_kws=dict(edgecolor="navy", linewidth=0.5, s=25, alpha=0.5),
             diag_kws=dict(color='steelblue', edgecolor='black', linewidth=0.5)) # "diag" adjusts/tunes the diagonal plots
plt.suptitle(topic, color='navy', fontweight='bold');  # Setting the titles.
plt.subplots_adjust(left=None, bottom=None, right=None, top=0.9, wspace=0.3, hspace=0.3);
plt.show()

# Generate the pair plot for the weather dataset
pp = sns.pairplot(weather_AUS, height=1.4, aspect=2, 
                  plot_kws=dict(edgecolor="navy", linewidth=0.5, s=25, alpha=0.5),
                  diag_kws=dict(shade=True, linewidth=0.5), # "diag" adjusts/tunes the diagonal plots
                  diag_kind="kde")
fig = pp.fig 
fig.subplots_adjust(top=0.9, wspace=0.3, hspace=0.3)
fig.suptitle('{} (kde)'.format(topic), fontweight='bold')
plt.show()

plt.style.use('default')


# Look at the scatter plot for the humidity variables
plt.figure()
plt.scatter(weather_AUS.Humidity9am, weather_AUS.Humidity3pm)
plt.xticks(); plt.yticks(); 
plt.xlabel('Humidity9am'); plt.ylabel('Humidity3pm');
plt.title("Relationship between Humidity9am and Humidity3pm", color='red')
plt.suptitle(topic, color='navy', fontweight='bold');  # Setting the titles.
#plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0.3, hspace=0.6);
plt.show()

print("Pearson correlation in Australian Weather Dataset")
print_pearson_coef(weather_AUS.Humidity9am, weather_AUS.Humidity3pm)

"""
# Compute and print the Pearson correlation
r = weather_AUS['Humidity9am'].corr(weather_AUS.Humidity3pm)
print("Pearson correlation:", r)

weather_AUS2 = weather_AUS.dropna()
stat, p = pearsonr(weather_AUS2.Humidity9am, weather_AUS2.Humidity3pm)
print('stat=%.8f, p=%.8f' % (stat, p))

if p > 0.05:
	print('Probably independent (p > 0.05).')
else:
	print('Probably dependent (p <= 0.05).')

# Calculate the r-squared value and print the result
r2 = r**2
print("Humidity9am explains around {:,.0f}% of the variability in the Humidity3pm variable.".format(r2*100))
"""



print("****************************************************")
topic = "10. Sensitivity to outliers"; print("** %s\n" % topic)

df = pd.DataFrame({
        "X": [10.0, 8.0, 13.0, 9.0, 11.0, 14.0, 6.0, 4.0, 12.0, 7.0, 5.0],
        "Y": [7.46, 6.77, 12.74, 7.11, 7.81, 8.84, 6.08, 5.39, 8.15, 6.42, 5.73]
    })

# Display the scatter plot of X and Y
plt.figure()
plt.scatter(df.X, df.Y)
plt.xticks(); plt.yticks(); 
plt.xlabel('X Feature'); plt.ylabel('Y Feature');
plt.title("Anscombe's quartet", color='red')
plt.suptitle(topic, color='navy', fontweight='bold');  # Setting the titles.
#plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0.3, hspace=0.6);
plt.show()

# Compute and print the correlation once more
print("Pearson correlation in Anscombe's quarter with outliers")
print_pearson_coef(df.X, df.Y)

# Drop the outlier from the dataset
df = df.drop(index=2)

# Compute and print the correlation once more
print("Pearson correlation in Anscombe's quarter without outliers")
print_pearson_coef(df.X, df.Y)



print("****************************************************")
print("** END                                            **")
print("****************************************************")