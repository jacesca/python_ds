# Extract the August 2010 data: august
august = df['Temperature']["2010-Aug"]
print("*** august ***")
print(august.shape)
print(august.head(24))

# Resample to daily data, aggregating by max: daily_highs
daily_highs = august.resample("D").max()
print("*** daily_highs ***")
print(daily_highs.shape)
print(daily_highs.head(24))

# Moving windows
# Use a rolling 7-day window with method chaining to smooth the daily high temperatures in August
#daily_highs_smoothed = daily_highs.rolling(window=7).mean()

daily_highs_smoothed = august.resample("D").max().rolling(window=7).mean()
print("*** daily_highs_smoothed ***")
print(daily_highs_smoothed.shape)
print(daily_highs_smoothed)
________________________________________________________
OUT:
	*** august ***
	(744,)

	Date
	2010-08-01 00:00:00    79.0
	2010-08-01 01:00:00    77.4
	2010-08-01 02:00:00    76.4
	2010-08-01 03:00:00    75.7
	2010-08-01 04:00:00    75.1
	2010-08-01 05:00:00    74.6
	2010-08-01 06:00:00    74.5
	2010-08-01 07:00:00    76.0
	2010-08-01 08:00:00    79.8
	2010-08-01 09:00:00    83.3
	2010-08-01 10:00:00    86.6
	2010-08-01 11:00:00    89.3
	2010-08-01 12:00:00    91.6
	2010-08-01 13:00:00    93.2
	2010-08-01 14:00:00    94.4
	2010-08-01 15:00:00    95.0
	2010-08-01 16:00:00    94.8
	2010-08-01 17:00:00    93.9
	2010-08-01 18:00:00    92.4
	2010-08-01 19:00:00    89.9
	2010-08-01 20:00:00    86.1
	2010-08-01 21:00:00    83.6
	2010-08-01 22:00:00    81.8
	2010-08-01 23:00:00    80.0
	Name: Temperature, dtype: float64

	*** daily_highs ***
	(31,)

	Date
	2010-08-01    95.0
	2010-08-02    95.0
	2010-08-03    95.1
	2010-08-04    95.1
	2010-08-05    95.1
	2010-08-06    95.2
	2010-08-07    95.3
	2010-08-08    95.2
	2010-08-09    95.2
	2010-08-10    95.1
	2010-08-11    95.0
	2010-08-12    94.9
	2010-08-13    95.0
	2010-08-14    94.9
	2010-08-15    94.7
	2010-08-16    94.7
	2010-08-17    94.8
	2010-08-18    94.8
	2010-08-19    94.8
	2010-08-20    94.8
	2010-08-21    94.7
	2010-08-22    94.6
	2010-08-23    94.5
	2010-08-24    94.3
	2010-08-25    94.1
	2010-08-26    94.0
	2010-08-27    93.7
	2010-08-28    93.5
	2010-08-29    93.3
	2010-08-30    93.3
	2010-08-31    93.1
	Freq: D, Name: Temperature, dtype: float64

	*** daily_highs_smoothed ***
	(31,)
	Date
	2010-08-01          NaN
	2010-08-02          NaN
	2010-08-03          NaN
	2010-08-04          NaN
	2010-08-05          NaN
	2010-08-06          NaN
	2010-08-07    95.114286
	2010-08-08    95.142857
	2010-08-09    95.171429
	2010-08-10    95.171429
	2010-08-11    95.157143
	2010-08-12    95.128571
	2010-08-13    95.100000
	2010-08-14    95.042857
	2010-08-15    94.971429
	2010-08-16    94.900000
	2010-08-17    94.857143
	2010-08-18    94.828571
	2010-08-19    94.814286
	2010-08-20    94.785714
	2010-08-21    94.757143
	2010-08-22    94.742857
	2010-08-23    94.714286
	2010-08-24    94.642857
	2010-08-25    94.542857
	2010-08-26    94.428571
	2010-08-27    94.271429
	2010-08-28    94.100000
	2010-08-29    93.914286
	2010-08-30    93.742857
	2010-08-31    93.571429
	Freq: D, Name: Temperature, dtype: float64
________________________________________________________
IPYTHONSHELL:
In [1]: type(df)
	Out[1]: pandas.core.frame.DataFrame
	
In [2]: df.shape
	Out[2]: (8759, 3)

In [3]: df.info()
	<class 'pandas.core.frame.DataFrame'>
	DatetimeIndex: 8759 entries, 2010-01-01 00:00:00 to 2010-12-31 23:00:00
	Data columns (total 3 columns):
	Temperature    8759 non-null float64
	DewPoint       8759 non-null float64
	Pressure       8759 non-null float64
	dtypes: float64(3)
	memory usage: 593.7 KB

In [4]: df.head()
	Out[4]: 
	                     Temperature  DewPoint  Pressure
	Date                                                
	2010-01-01 00:00:00         46.2      37.5       1.0
	2010-01-01 01:00:00         44.6      37.1       1.0
	2010-01-01 02:00:00         44.1      36.9       1.0
	2010-01-01 03:00:00         43.8      36.9       1.0
	2010-01-01 04:00:00         43.5      36.8       1.0

In [5]: df.tail()
	Out[5]: 
	                     Temperature  DewPoint  Pressure
	Date                                                
	2010-12-31 19:00:00         51.1      38.1       1.0
	2010-12-31 20:00:00         49.0      37.9       1.0
	2010-12-31 21:00:00         47.9      37.9       1.0
	2010-12-31 22:00:00         46.9      37.9       1.0
	2010-12-31 23:00:00         46.2      37.7       1.0

In [6]: df.describe()
	Out[6]: 
	       Temperature     DewPoint  Pressure
	count  8759.000000  8759.000000    8759.0
	mean     68.077258    55.939057       1.0
	std      13.773378    11.757706       0.0
	min      41.800000    35.300000       1.0
	25%      57.100000    44.400000       1.0
	50%      68.700000    57.300000       1.0
	75%      78.550000    67.800000       1.0
	max      95.300000    72.900000       1.0
________________________________________________________
INSTRUCTION:
1. Use partial string indexing to extract August 2010 
   temperature data, and assign to august.
2. Resample to daily frequency, saving the maximum daily 
   temperatures, and assign the result to daily_highs.
3. As part of one long method chain, repeat the above 
   resampling (or you can re-use daily_highs) and then 
   combine it with .rolling() to apply a 7 day .mean() 
   (with window=7 inside .rolling()) so as to smooth the 
   daily highs. Assign the result to 
   daily_highs_smoothed and print the result.
________________________________________________________
GUIDE:
Resample and roll with it
As of pandas version 0.18.0, the interface for applying 
rolling transformations to time series has become more 
consistent and flexible, and feels somewhat like a 
groupby (If you do not know what a groupby is, don't 
worry, you will learn about it in the next course!).

You can now flexibly chain together resampling and 
rolling operations. In this exercise, the same weather 
data from the previous exercises has been pre-loaded 
for you. Your job is to extract one month of data, 
resample to find the daily high temperatures, and then 
use a rolling and aggregation operation to smooth the 
data.
________________________________________________________
