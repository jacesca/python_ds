# Downsample df_clean by day and aggregate by mean: daily_mean_2011
daily_mean_2011 = df_clean.resample("D").mean()
		#print("***** Variable daily_mean_2011 *****")
		#print("type: ",type(daily_mean_2011))
		#print("shape: ",daily_mean_2011.shape)
		#print("head:")
		#print(daily_mean_2011.head())

# Extract the dry_bulb_faren column from daily_mean_2011 using .values: daily_temp_2011
daily_temp_2011 = daily_mean_2011.dry_bulb_faren.values
		#print("***** Variable daily_temp_2011 *****")
		#print("type: ",type(daily_temp_2011))
		#print("len: ",len(daily_temp_2011))
		#print("5 first elements: ",daily_temp_2011[0:5])

# Downsample df_climate by day and aggregate by mean: daily_climate
daily_climate = df_climate.resample("D").mean()
		#print("***** Variable daily_climate (2010) *****")
		#print("type: ",type(daily_climate))
		#print("shape: ",daily_climate.shape)
		#print("head:")
		#print(daily_climate.head())

# Extract the Temperature column from daily_climate using .reset_index(): daily_temp_climate
daily_temp_climate = daily_climate.reset_index()["Temperature"].values

#daily_temp_climate = daily_climate.reset_index().Temperature.values
#Mismo resultado--> daily_temp_climate = daily_climate.reset_index()["Temperature"]

		#print("***** Variable daily_temp_climate (2010) *****")
		#print("type: ",type(daily_temp_climate))
		#print("len: ",len(daily_temp_climate))
		#print("5 first elements: ",daily_temp_climate[0:5])

# Compute the difference between the two arrays and print the mean difference
difference = daily_temp_2011 - daily_temp_climate
		#print("***** the mean difference *****")
print(difference.mean())
________________________________________________________
OUT:
	# ***** Variable daily_mean_2011 *****
	# type:  <class 'pandas.core.frame.DataFrame'>
	# shape:  (365, 5)
	# head:
	#              Wban  StationType  dry_bulb_faren  dew_point_faren  wind_speed
	# 2011-01-01  13904           12       50.166667        20.500000   11.083333
	# 2011-01-02  13904           12       39.416667        19.708333    4.166667
	# 2011-01-03  13904           12       46.846154        35.500000    2.653846
	# 2011-01-04  13904           12       53.367347        50.408163    2.510204
	# 2011-01-05  13904           12       57.965517        40.068966    4.689655
	# 
	# ***** Variable daily_temp_2011 *****
	# type:  <class 'numpy.ndarray'>
	# len:  365
	# 5 first elements:  [50.16666667 39.41666667 46.84615385 53.36734694 57.96551724]
	# 
	# ***** Variable daily_climate (2010) *****
	# type:  <class 'pandas.core.frame.DataFrame'>
	# shape:  (365, 3)
	# head:
	#             Temperature   DewPoint  Pressure
	# Date                                        
	# 2010-01-01    49.337500  37.716667       1.0
	# 2010-01-02    49.795833  38.370833       1.0
	# 2010-01-03    49.900000  38.279167       1.0
	# 2010-01-04    49.729167  38.008333       1.0
	# 2010-01-05    49.841667  38.087500       1.0
	# 
	# ***** Variable daily_temp_climate (2010) *****
	# type:  <class 'numpy.ndarray'>
	# len:  365
	# 5 first elements:  [49.3375     49.79583333 49.9        49.72916667 49.84166667]
	# 
	# ***** the mean difference *****

1.3301831870056477
________________________________________________________
IPYTHONSHELL:
In [1]: [type(df_clean),type(df_climate)]
	Out[1]: [pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]

In [2]: [df_clean.shape, df_climate.shape]
	Out[2]: [(10337, 17), (8759, 3)]

In [3]: df_clean.head()
	Out[3]: 
	                      Wban      date    Time  StationType sky_condition  ... relative_humidity  wind_speed wind_direction station_pressure sea_level_pressure
	2011-01-01 00:53:00  13904  20110101  005300           12        OVC045  ...                24        15.0            360            29.42              29.95
	2011-01-01 01:53:00  13904  20110101  015300           12        OVC049  ...                23        10.0            340            29.49              30.01
	2011-01-01 02:53:00  13904  20110101  025300           12        OVC060  ...                22        15.0            010            29.49              30.01
	2011-01-01 03:53:00  13904  20110101  035300           12        OVC065  ...                27         7.0            350            29.51              30.03
	2011-01-01 04:53:00  13904  20110101  045300           12        BKN070  ...                25        11.0            020            29.51              30.04
	[5 rows x 17 columns]

In [4]: df_climate.head()
	Out[4]: 
	                     Temperature  DewPoint  Pressure
	Date                                                
	2010-01-01 00:00:00         46.2      37.5       1.0
	2010-01-01 01:00:00         44.6      37.1       1.0
	2010-01-01 02:00:00         44.1      36.9       1.0
	2010-01-01 03:00:00         43.8      36.9       1.0
	2010-01-01 04:00:00         43.5      36.8       1.0

In [5]: df_clean.info()
	<class 'pandas.core.frame.DataFrame'>
	DatetimeIndex: 10337 entries, 2011-01-01 00:53:00 to 2011-12-31 23:53:00
	Data columns (total 17 columns):
	Wban                  10337 non-null int64
	date                  10337 non-null object
	Time                  10337 non-null object
	StationType           10337 non-null int64
	sky_condition         10337 non-null object
	visibility            10325 non-null object
	dry_bulb_faren        10326 non-null float64
	dry_bulb_cel          10337 non-null object
	wet_bulb_faren        10337 non-null object
	wet_bulb_cel          10337 non-null object
	dew_point_faren       10323 non-null float64
	dew_point_cel         10337 non-null object
	relative_humidity     10337 non-null object
	wind_speed            10318 non-null float64
	wind_direction        10337 non-null object
	station_pressure      10337 non-null object
	sea_level_pressure    10337 non-null object
	dtypes: float64(3), int64(2), object(12)
	memory usage: 1.7+ MB
	
In [6]: df_climate.info()
	<class 'pandas.core.frame.DataFrame'>
	DatetimeIndex: 8759 entries, 2010-01-01 00:00:00 to 2010-12-31 23:00:00
	Data columns (total 3 columns):
	Temperature    8759 non-null float64
	DewPoint       8759 non-null float64
	Pressure       8759 non-null float64
	dtypes: float64(3)
	memory usage: 593.7 KB

#How many elements per value in a columns
#Cuantos elementos hay por valor en una columna
In [7]: df_clean['date'].value_counts()
	Out[1]: 
	20111215    56
	20111204    54
	20111202    51
	            ..
	20111217    24
	20110504    24
	20110827    18
	Name: date, Length: 365, dtype: int64

#How many elements per index, Test unique index
#Cuantos valores por cada indice, comprueba que el indice sea unico
In [8]: df_clean.index.value_counts()
	Out[4]: 
	2011-06-09 08:53:00    1
	2011-04-28 13:53:00    1
	2011-10-06 03:53:00    1
                      ..
	2011-11-04 03:53:00    1
	2011-07-11 15:53:00    1
	2011-08-17 15:53:00    1
	Length: 10337, dtype: int64

In [9]: df_clean.index.value_counts()[0]==1

	Out[9]: True
________________________________________________________
INSTRUCTION:
1. Downsample df_clean with daily frequency and 
   aggregate by the mean. Store the result as 
   daily_mean_2011.
2. Extract the 'dry_bulb_faren' column from 
   daily_mean_2011 as a NumPy array using .values. 
   Store the result as daily_temp_2011. Note: 
   .values is an attribute, not a method, so you 
   don't have to use ().
3. Downsample df_climate with daily frequency and 
   aggregate by the mean. Store the result as 
   daily_climate.
4. Extract the 'Temperature' column from 
   daily_climate using the .reset_index() method. 
   To do this, first reset the index of 
   daily_climate, and then use bracket slicing 
   to access 'Temperature'. Store the result as 
   daily_temp_climate.
________________________________________________________
GUIDE:
Signal variance
You're now ready to compare the 2011 weather data 
with the 30-year normals reported in 2010. You can 
ask questions such as, on average, how much hotter 
was every day in 2011 than expected from the 30-year 
average?

The DataFrames df_clean and df_climate from previous 
exercises are available in the workspace.

Your job is to first resample df_clean and df_climate 
by day and aggregate the mean temperatures. You will 
then extract the temperature related columns from each 
- 'dry_bulb_faren' in df_clean, and 'Temperature' in 
df_climate - as NumPy arrays and compute the difference.

Notice that the indexes of df_clean and df_climate are 
not aligned - df_clean has dates in 2011, while 
df_climate has dates in 2010. This is why you extract 
the temperature columns as NumPy arrays. An alternative 
approach is to use the pandas .reset_index() method to 
make sure the Series align properly. You will practice 
this approach as well.
________________________________________________________
