# Reindex without fill method: ts3
ts3 = ts2.reindex(ts1.index)
print("\nts3:\n",ts3)

# Reindex with fill method, using forward fill: ts4
ts4 = ts2.reindex(ts1.index, method="ffill")
print("\nts4:\n",ts4)

# Combine ts1 + ts2: sum12
sum12 = ts1 + ts2
print("\nsum12:\n",sum12)

# Combine ts1 + ts3: sum13
sum13 = ts1 + ts3
print("\nsum13:\n",sum13)

# Combine ts1 + ts4: sum14
sum14 = ts1 + ts4
print("\nsum14:\n",sum14)

data=pd.DataFrame({"ts1":ts1,"ts2":ts2,"ts3":ts3,"ts4":ts4,
                   "sum12":sum12,"sum13":sum13,"sum14":sum14},
              index=ts1.index)
print("\nData:\n",data)
________________________________________________________
OUT:
	ts3:
	2016-07-01     0.0
	2016-07-02     NaN
	2016-07-03     NaN
	2016-07-04     1.0
	2016-07-05     2.0
	2016-07-06     3.0
	2016-07-07     4.0
	2016-07-08     5.0
	2016-07-09     NaN
	2016-07-10     NaN
	2016-07-11     6.0
	2016-07-12     7.0
	2016-07-13     8.0
	2016-07-14     9.0
	2016-07-15    10.0
	2016-07-16     NaN
	2016-07-17     NaN
	dtype: float64
	
	ts4:
	2016-07-01     0
	2016-07-02     0
	2016-07-03     0
	2016-07-04     1
	2016-07-05     2
	2016-07-06     3
	2016-07-07     4
	2016-07-08     5
	2016-07-09     5
	2016-07-10     5
	2016-07-11     6
	2016-07-12     7
	2016-07-13     8
	2016-07-14     9
	2016-07-15    10
	2016-07-16    10
	2016-07-17    10
	dtype: int64

	sum12:
	 2016-07-01     0.0
	2016-07-02     NaN
	2016-07-03     NaN
	2016-07-04     4.0
	2016-07-05     6.0
	2016-07-06     8.0
	2016-07-07    10.0
	2016-07-08    12.0
	2016-07-09     NaN
	2016-07-10     NaN
	2016-07-11    16.0
	2016-07-12    18.0
	2016-07-13    20.0
	2016-07-14    22.0
	2016-07-15    24.0
	2016-07-16     NaN
	2016-07-17     NaN
	dtype: float64

	sum13:
	2016-07-01     0.0
	2016-07-02     NaN
	2016-07-03     NaN
	2016-07-04     4.0
	2016-07-05     6.0
	2016-07-06     8.0
	2016-07-07    10.0
	2016-07-08    12.0
	2016-07-09     NaN
	2016-07-10     NaN
	2016-07-11    16.0
	2016-07-12    18.0
	2016-07-13    20.0
	2016-07-14    22.0
	2016-07-15    24.0
	2016-07-16     NaN
	2016-07-17     NaN
	dtype: float64

	sum14:
	2016-07-01     0
	2016-07-02     1
	2016-07-03     2
	2016-07-04     4
	2016-07-05     6
	2016-07-06     8
	2016-07-07    10
	2016-07-08    12
	2016-07-09    13
	2016-07-10    14
	2016-07-11    16
	2016-07-12    18
	2016-07-13    20
	2016-07-14    22
	2016-07-15    24
	2016-07-16    25
	2016-07-17    26
	dtype: int64

	Data:
	             ts1   ts2   ts3  ts4  sum12  sum13  sum14
	2016-07-01    0   0.0   0.0    0    0.0    0.0      0
	2016-07-02    1   NaN   NaN    0    NaN    NaN      1
	2016-07-03    2   NaN   NaN    0    NaN    NaN      2
	2016-07-04    3   1.0   1.0    1    4.0    4.0      4
	2016-07-05    4   2.0   2.0    2    6.0    6.0      6
	2016-07-06    5   3.0   3.0    3    8.0    8.0      8
	2016-07-07    6   4.0   4.0    4   10.0   10.0     10
	2016-07-08    7   5.0   5.0    5   12.0   12.0     12
	2016-07-09    8   NaN   NaN    5    NaN    NaN     13
	2016-07-10    9   NaN   NaN    5    NaN    NaN     14
	2016-07-11   10   6.0   6.0    6   16.0   16.0     16
	2016-07-12   11   7.0   7.0    7   18.0   18.0     18
	2016-07-13   12   8.0   8.0    8   20.0   20.0     20
	2016-07-14   13   9.0   9.0    9   22.0   22.0     22
	2016-07-15   14  10.0  10.0   10   24.0   24.0     24
	2016-07-16   15   NaN   NaN   10    NaN    NaN     25
	2016-07-17   16   NaN   NaN   10    NaN    NaN     26
________________________________________________________
IPYTHONSHELL:
In [1]: ts1.shape
	Out[1]: (17,)

In [2]: ts1
	Out[2]: 
		2016-07-01     0
		2016-07-02     1
		2016-07-03     2
		2016-07-04     3
		2016-07-05     4
		2016-07-06     5
		2016-07-07     6
		2016-07-08     7
		2016-07-09     8
		2016-07-10     9
		2016-07-11    10
		2016-07-12    11
		2016-07-13    12
		2016-07-14    13
		2016-07-15    14
		2016-07-16    15
		2016-07-17    16
		dtype: int64

In [3]: ts2.shape
	Out[3]: (11,)

In [4]: ts2
	Out[4]: 
	2016-07-01     0
	2016-07-04     1
	2016-07-05     2
	2016-07-06     3
	2016-07-07     4
	2016-07-08     5
	2016-07-11     6
	2016-07-12     7
	2016-07-13     8
	2016-07-14     9
	2016-07-15    10
	dtype: int64

In [5]: ts1.index
	Out[5]: 
	DatetimeIndex(['2016-07-01', '2016-07-02', '2016-07-03', 
                       '2016-07-04', '2016-07-05', '2016-07-06', 
                       '2016-07-07', '2016-07-08', '2016-07-09', 
                       '2016-07-10', '2016-07-11', '2016-07-12', 
                       '2016-07-13', '2016-07-14', '2016-07-15', 
                       '2016-07-16', '2016-07-17'],
	              dtype='datetime64[ns]', freq=None)

In [6]: ts2.index
	Out[6]: 
	DatetimeIndex(['2016-07-01', '2016-07-04', '2016-07-05', 
                       '2016-07-06', '2016-07-07', '2016-07-08', 
                       '2016-07-11', '2016-07-12', '2016-07-13', 
                       '2016-07-14', '2016-07-15'], 
                      dtype='datetime64[ns]', freq=None)
________________________________________________________
INSTRUCTION:
1. Create a new time series ts3 by reindexing ts2 with 
   the index of ts1. To do this, call .reindex() on ts2 
   and pass in the index of ts1 (ts1.index).
2. Create another new time series, ts4, by calling the 
   same .reindex() as above, but also specifiying a fill 
   method, using the keyword argument method="ffill" to 
   forward-fill values.
3. Add ts1 + ts2. Assign the result to sum12.
4. Add ts1 + ts3. Assign the result to sum13.
5. Add ts1 + ts4, Assign the result to sum14.
________________________________________________________
GUIDE:
Reindexing the Index
Reindexing is useful in preparation for adding or 
otherwise combining two time series data sets. To 
reindex the data, we provide a new index and ask 
pandas to try and match the old data to the new 
index. If data is unavailable for one of the new 
index dates or times, you must tell pandas how to 
fill it in. Otherwise, pandas will fill with NaN 
by default.

In this exercise, two time series data sets containing 
daily data have been pre-loaded for you, each indexed 
by dates. The first, ts1, includes weekends, but the 
second, ts2, does not. The goal is to combine the two 
data sets in a sensible way. Your job is to reindex 
the second data set so that it has weekends as well, 
and then add it to the first. When you are done, it 
would be informative to inspect your results.
________________________________________________________
