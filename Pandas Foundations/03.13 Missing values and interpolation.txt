# Reset the index of ts2 to ts1, and then use linear interpolation to fill in the NaNs: ts2_interp
ts2_interp = ts2.reindex(ts1.index).interpolate(how="linear")
print("ts2_interp:")
print(ts2_interp)

# Compute the absolute difference of ts1 and ts2_interp: differences 
differences = ts1-ts2_interp

# Generate and print summary statistics of the differences
print("\nSummary statistics of the differences:")
print(differences.describe())


print(pd.DataFrame({"ts1":ts1,
                    "ts2":ts2,
                    "ts2_interp":ts2_interp,
                    "ts1-ts2_interp":differences}))
________________________________________________________
OUT:
	ts2_interp:
	2016-07-01     0.000000
	2016-07-02     0.333333
	2016-07-03     0.666667
	2016-07-04     1.000000
	2016-07-05     2.000000
	2016-07-06     3.000000
	2016-07-07     4.000000
	2016-07-08     5.000000
	2016-07-09     5.333333
	2016-07-10     5.666667
	2016-07-11     6.000000
	2016-07-12     7.000000
	2016-07-13     8.000000
	2016-07-14     9.000000
	2016-07-15    10.000000
	2016-07-16    10.000000
	2016-07-17    10.000000
	dtype: float64

	Summary statistics of the differences:
	count    17.000000
	mean      2.882353
	std       1.585267
	min       0.000000
	25%       2.000000
	50%       2.666667
	75%       4.000000
	max       6.000000
	dtype: float64

            ts1   ts2  ts2_interp  ts1-ts2_interp
2016-07-01    0   0.0    0.000000        0.000000
2016-07-02    1   NaN    0.333333        0.666667
2016-07-03    2   NaN    0.666667        1.333333
2016-07-04    3   1.0    1.000000        2.000000
2016-07-05    4   2.0    2.000000        2.000000
2016-07-06    5   3.0    3.000000        2.000000
2016-07-07    6   4.0    4.000000        2.000000
2016-07-08    7   5.0    5.000000        2.000000
2016-07-09    8   NaN    5.333333        2.666667
2016-07-10    9   NaN    5.666667        3.333333
2016-07-11   10   6.0    6.000000        4.000000
2016-07-12   11   7.0    7.000000        4.000000
2016-07-13   12   8.0    8.000000        4.000000
2016-07-14   13   9.0    9.000000        4.000000
2016-07-15   14  10.0   10.000000        4.000000
2016-07-16   15   NaN   10.000000        5.000000
2016-07-17   16   NaN   10.000000        6.000000
________________________________________________________
IPYTHONSHELL:
In [1]: [type(ts1),type(ts2)]
	Out[1]: [pandas.core.series.Series, pandas.core.series.Series]

In [2]: [ts1.shape,ts2.shape]
	Out[2]: [(17,), (11,)]

In [3]: ts1
	Out[3]: 
	2016-07-01     0
	2016-07-02     1
	2016-07-03     2
	2016-07-04     3
	2016-07-05     4
	2016-07-06     5
	2016-07-07     6
	2016-07-08     7
	2016-07-09     8
	2016-07-10     9
	2016-07-11    10
	2016-07-12    11
	2016-07-13    12
	2016-07-14    13
	2016-07-15    14
	2016-07-16    15
	2016-07-17    16
	dtype: int64

In [4]: ts2
	Out[4]: 
	2016-07-01     0
	2016-07-04     1
	2016-07-05     2
	2016-07-06     3
	2016-07-07     4
	2016-07-08     5
	2016-07-11     6
	2016-07-12     7
	2016-07-13     8
	2016-07-14     9
	2016-07-15    10
	dtype: int64
________________________________________________________
INSTRUCTION:
1. Replace the index of ts2 with that of ts1, and then 
   fill in the missing values of ts2 by using 
   .interpolate(how='linear'). Save the result as 
   ts2_interp.
2. Compute the difference between ts1 and ts2_interp. 
   Take the absolute value of the difference with 
   np.abs(), and assign the result to differences.
3. Generate and print summary statistics of the 
   differences with .describe() and print().
________________________________________________________
GUIDE:
Missing values and interpolation
One common application of interpolation in data 
analysis is to fill in missing data.

In this exercise, noisy measured data that has some 
dropped or otherwise missing values has been loaded. 
The goal is to compare two time series, and then look 
at summary statistics of the differences. The problem 
is that one of the data sets is missing data at some 
of the times. The pre-loaded data ts1 has value for 
all times, yet the data set ts2 does not: it is missing 
data for the weekends.

Your job is to first interpolate to fill in the data 
for all days. Then, compute the differences between 
the two data sets, now that they both have full support 
for all times. Finally, generate the summary statistics 
that describe the distribution of differences.
________________________________________________________
