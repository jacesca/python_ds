INSTRUCTION (I):

1. Get the cases in df_clean where the sky is clear. 
   That is, when 'sky_condition' equals 'CLR', 
   assigning to is_sky_clear.
2. Use .loc[] to filter df_clean by is_sky_clear, 
   assigning to sunny.
3. Resample sunny by day ('D'), and take the max to 
   find the maximum daily temperature.
________________________________________________________

# Using df_clean, when is sky_condition 'CLR'?
is_sky_clear = df_clean['sky_condition']=='CLR'

# Filter df_clean using is_sky_clear
sunny = df_clean.loc[is_sky_clear]

# Resample sunny by day then calculate the max
sunny_daily_max = sunny.resample('D').max()

# See the result
sunny_daily_max.head()
________________________________________________________

OUT:
		               Wban      date    Time  StationType sky_condition  ...  relative_humidity wind_speed wind_direction station_pressure  sea_level_pressure
	2011-01-01  13904.0  20110101  235300         12.0           CLR  ...                 53       16.0            360            29.78               30.33
	2011-01-02  13904.0  20110102  225300         12.0           CLR  ...                 76        8.0            360            29.82               30.38
	2011-01-03  13904.0  20110103  045300         12.0           CLR  ...                 85        0.0            000            29.71               30.27
	2011-01-04      NaN       NaN     NaN          NaN           NaN  ...                NaN        NaN            NaN              NaN                 NaN
	2011-01-05  13904.0  20110105  235300         12.0           CLR  ...                 79        0.0            000            29.54               30.08

	[5 rows x 16 columns]
________________________________________________________

INSTRUCTION (II):

1. Get the cases in df_clean where the sky is overcast. 
   Using .str.contains(), find when 'sky_condition' 
   contains 'OVC', assigning to is_sky_overcast.
2. Use .loc[] to filter df_clean by is_sky_overcast, 
   assigning to overcast.
3. Resample overcast by day ('D'), and take the max 
   to find the maximum daily temperature.
________________________________________________________

# Using df_clean, when does sky_condition contain 'OVC'?
is_sky_overcast = df_clean['sky_condition'].str.contains('OVC')

# Filter df_clean using is_sky_overcast
overcast = df_clean.loc[is_sky_overcast]

# Resample overcast by day then calculate the max
overcast_daily_max = overcast.resample("D").max()

# See the result
overcast_daily_max.head()
________________________________________________________

OUT:
	               Wban      date    Time  StationType  sky_condition  ...  relative_humidity wind_speed wind_direction station_pressure  sea_level_pressure
	2011-01-01  13904.0  20110101  035300         12.0         OVC065  ...                 27       15.0            360            29.51               30.03
	2011-01-02      NaN       NaN     NaN          NaN            NaN  ...                NaN        NaN            NaN              NaN                 NaN
	2011-01-03  13904.0  20110103  235300         12.0  SCT042 OVC055  ...                 79       10.0            200            29.70                   M
	2011-01-04  13904.0  20110104  235300         12.0  SCT010 OVC016  ...                100        8.0            VR             29.59                   M
	2011-01-05  13904.0  20110105  065300         12.0  SCT006 OVC011  ...                 96        3.0            250            29.48                   M
	
	[5 rows x 16 columns]

________________________________________________________

INSTRUCTION (III):

1. Calculate the mean of sunny_daily_max, assigning 
   to sunny_daily_max_mean.
2. Calculate the mean of overcast_daily_max, assigning 
   to overcast_daily_max_mean.
3. Print sunny_daily_max_mean minus 
   overcast_daily_max_mean. 
   How much hotter are sunny days?
________________________________________________________

# From previous steps
#Sunny
is_sky_clear = df_clean['sky_condition']=='CLR'
sunny = df_clean.loc[is_sky_clear]
sunny_daily_max = sunny.resample('D').max()
#Cloudy
is_sky_overcast = df_clean['sky_condition'].str.contains('OVC')
overcast = df_clean.loc[is_sky_overcast]
overcast_daily_max = overcast.resample('D').max()

# Calculate the mean of sunny_daily_max
sunny_daily_max_mean = sunny_daily_max.mean()

# Calculate the mean of overcast_daily_max
overcast_daily_max_mean = overcast_daily_max.mean()

# Print the difference (sunny minus overcast)
print(sunny_daily_max_mean - overcast_daily_max_mean)
________________________________________________________

OUT:
	Wban               0.000000
	StationType        0.000000
	dry_bulb_faren     6.504304
	dew_point_faren   -4.339286
	wind_speed        -3.246062
	dtype: float64
________________________________________________________

IPYTHONSHELL:

In [1]: type(df_clean)
	Out[1]: pandas.core.frame.DataFrame

In [2]: df_clean.shape
	Out[2]: (10337, 17)

In [3]: df_clean.head()
	Out[3]: 
	                      Wban      date    Time  StationType sky_condition  ... relative_humidity  wind_speed wind_direction station_pressure sea_level_pressure
	2011-01-01 00:53:00  13904  20110101  005300           12        OVC045  ...                24        15.0            360            29.42              29.95
	2011-01-01 01:53:00  13904  20110101  015300           12        OVC049  ...                23        10.0            340            29.49              30.01
	2011-01-01 02:53:00  13904  20110101  025300           12        OVC060  ...                22        15.0            010            29.49              30.01
	2011-01-01 03:53:00  13904  20110101  035300           12        OVC065  ...                27         7.0            350            29.51              30.03
	2011-01-01 04:53:00  13904  20110101  045300           12        BKN070  ...                25        11.0            020            29.51              30.04
	[5 rows x 17 columns]

In [4]: df_clean.tail()
	Out[4]: 
	                      Wban      date    Time  StationType sky_condition  ... relative_humidity  wind_speed wind_direction station_pressure sea_level_pressure
	2011-12-31 19:53:00  13904  20111231  195300           12           CLR  ...                69         5.0            200            29.49              30.03
	2011-12-31 20:53:00  13904  20111231  205300           12           CLR  ...                80         0.0            000            29.52              30.05
	2011-12-31 21:53:00  13904  20111231  215300           12           CLR  ...                80         0.0            000            29.53              30.06
	2011-12-31 22:53:00  13904  20111231  225300           12           CLR  ...                83         3.0            150            29.56              30.09
	2011-12-31 23:53:00  13904  20111231  235300           12           CLR  ...                93         3.0            260            29.59              30.11
	[5 rows x 17 columns]

In [5]: df_clean.info()
	<class 'pandas.core.frame.DataFrame'>
	DatetimeIndex: 10337 entries, 2011-01-01 00:53:00 to 2011-12-31 23:53:00
	Data columns (total 17 columns):
	Wban                  10337 non-null int64
	date                  10337 non-null object
	Time                  10337 non-null object
	StationType           10337 non-null int64
	sky_condition         10337 non-null object
	visibility            10325 non-null object
	dry_bulb_faren        10326 non-null float64
	dry_bulb_cel          10337 non-null object
	wet_bulb_faren        10337 non-null object
	wet_bulb_cel          10337 non-null object
	dew_point_faren       10323 non-null float64
	dew_point_cel         10337 non-null object
	relative_humidity     10337 non-null object
	wind_speed            10318 non-null float64
	wind_direction        10337 non-null object
	station_pressure      10337 non-null object
	sea_level_pressure    10337 non-null object
	dtypes: float64(3), int64(2), object(12)
	memory usage: 1.7+ MB

In [6]: df_clean.sky_condition.describe()
	Out[6]: 
	count     10337
	unique     2735
	top         CLR
	freq       2349
	Name: sky_condition, dtype: object

In [7]: df_clean.sky_condition.unique()
	Out[7]: 
	array(['OVC045', 'OVC049', 'OVC060', ..., 
               'FEW019 BKN032 BKN095',
	       'FEW019 SCT032 BKN100', 'SCT021 BKN028'], 
              dtype=object)

In [8]: "Sunny days", 
        str(round(df_clean.sky_condition.describe()[3]/
                  df_clean.sky_condition.describe()[0]*100,2))
        +'%'

	Out[8]: ('Sunny days', '22.72%')

In [9]: df_clean[df_clean.sky_condition.str.contains("OVC")].sky_condition.count()
	Out[9]: 2758

In [10]: "Cloudy days",
         str(round(
               df_clean[df_clean.sky_condition.str.contains("OVC")].sky_condition.count()
               /df_clean.sky_condition.count()
               *100,2))+"%"
	Out[10]: ('Cloudy days', '26.68%')
________________________________________________________

GUIDE:

Sunny or cloudy
On average, how much hotter is it when the sun is 
shining? In this exercise, you will compare temperatures 
on sunny days against temperatures on overcast days.

Your job is to use Boolean selection to filter out 
sunny and overcast days, and then compute the difference 
of the mean daily maximum temperatures between each 
type of day.

The DataFrame df_clean from previous exercises has 
been provided for you. The column 'sky_condition' 
provides information about whether the day was sunny 
('CLR') or overcast ('OVC').
________________________________________________________
