# Import numpy
import numpy as np

# Create array of DataFrame values: np_vals
np_vals = df["Total Population"].values

# Create new array of base 10 logarithm values: np_vals_log10
np_vals_log10 = np.log10(np_vals)

# Create array of new DataFrame by passing df to np.log10(): df_log10
df_log10 = np.log10(df)

# Print original and new data containers
[print(x, 'has type', type(eval(x))) 
       for x in ['np_vals', 'np_vals_log10', 'df', 'df_log10']] #generate [None, None, None, None]
________________________________________________________
OUT:

np_vals has type <class 'numpy.ndarray'>
np_vals_log10 has type <class 'numpy.ndarray'>
df has type <class 'pandas.core.frame.DataFrame'>
df_log10 has type <class 'pandas.core.frame.DataFrame'>
________________________________________________________
IPYTHONSHELL:
In [1]: df.head()
	Out[1]: 
	      Total Population
	Year                  
	1960      3.034971e+09
	1970      3.684823e+09
	1980      4.436590e+09
	1990      5.282716e+09
	2000      6.115974e+09

In [2]: df.info()
	<class 'pandas.core.frame.DataFrame'>
	Int64Index: 6 entries, 1960 to 2010
	Data columns (total 1 columns):
	Total Population    6 non-null float64
	dtypes: float64(1)
	memory usage: 256.0 bytes

In [3]: df.shape
	Out[3]: (6, 1)

In [4]: df.columns
	Out[4]: Index(['Total Population'], dtype='object')

In [5]: df.index
	Out[5]: Int64Index([1960, 1970, 1980, 1990, 2000, 2010], dtype='int64', name='Year')

****** AFTER EXECUTE THE CODE ******
In [6]: print(np_vals_log10)
	[[9.48215448]
	 [9.5664166 ]
	 [9.64704933]
	 [9.72285726]
	 [9.78646566]
	 [9.84037481]]

In [7]: print(df_log10)
	      Total Population
	Year                  
	1960          9.482154
	1970          9.566417
	1980          9.647049
	1990          9.722857
	2000          9.786466
	2010          9.840375
________________________________________________________
INSTRUCTION:
1. Import numpy using the standard alias np.
2. Assign the numerical values in the DataFrame 
   df to an array np_vals using the attribute values.
3. Pass np_vals into the NumPy method log10() and 
   store the results in np_vals_log10.
4. Pass the entire df DataFrame into the NumPy 
   method log10() and store the results in df_log10.
5. Inspect the output of the print() code to see the 
   type() of the variables that you created.
________________________________________________________
GUIDE:
NumPy and pandas working together
Pandas depends upon and interoperates with NumPy, the 
Python library for fast numeric array computations. For 
example, you can use the DataFrame attribute .values to 
represent a DataFrame df as a NumPy array. You can also 
pass pandas data structures to NumPy methods. In this 
exercise, we have imported pandas as pd and loaded world 
population data every 10 years since 1960 into the 
DataFrame df. This dataset was derived from the one used 
in the previous exercise.

Your job is to extract the values and store them in an 
array using the attribute .values. You'll then use 
those values as input into the NumPy np.log10() method 
to compute the base 10 logarithm of the population values. 
Finally, you will pass the entire pandas DataFrame into 
the same NumPy np.log10() method and compare the results.
________________________________________________________
