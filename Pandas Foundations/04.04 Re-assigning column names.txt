# Split on the comma to create a list: column_labels_list
column_labels_list = column_labels.split(",")
print("column_labels_list:\n",column_labels_list,"\n\n")

# Assign the new column labels to the DataFrame: df.columns
df.columns = column_labels_list

# Remove the appropriate columns: df_dropped
df_dropped = df.drop(list_to_drop,axis="columns")

print("df_dropped:")
print("HEAD:")
# Print the output of df_dropped.head()
print(df_dropped.head())
print("INFO:")
print(df_dropped.info())
________________________________________________________
OUT:
	column_labels_list:
	 ['Wban', 'date', 'Time', 'StationType', 
          'sky_condition', 'sky_conditionFlag', 'visibility', 
          'visibilityFlag', 'wx_and_obst_to_vision', 
          'wx_and_obst_to_visionFlag', 'dry_bulb_faren', 
          'dry_bulb_farenFlag', 'dry_bulb_cel', 
          'dry_bulb_celFlag', 'wet_bulb_faren', 
          'wet_bulb_farenFlag', 'wet_bulb_cel', 
          'wet_bulb_celFlag', 'dew_point_faren', 
          'dew_point_farenFlag', 'dew_point_cel', 
          'dew_point_celFlag', 'relative_humidity', 
          'relative_humidityFlag', 'wind_speed', 
          'wind_speedFlag', 'wind_direction', 
          'wind_directionFlag', 'value_for_wind_character', 
          'value_for_wind_characterFlag', 'station_pressure', 
          'station_pressureFlag', 'pressure_tendency', 
          'pressure_tendencyFlag', 'presschange', 
          'presschangeFlag', 'sea_level_pressure', 
          'sea_level_pressureFlag', 'record_type', 
          'hourly_precip', 'hourly_precipFlag', 'altimeter', 
          'altimeterFlag', 'junk'] 


	df_dropped:
	HEAD:
	    Wban      date  Time  StationType sky_condition  ... relative_humidity wind_speed wind_direction station_pressure sea_level_pressure
	0  13904  20110101    53           12        OVC045  ...                24         15            360            29.42              29.95
	1  13904  20110101   153           12        OVC049  ...                23         10            340            29.49              30.01
	2  13904  20110101   253           12        OVC060  ...                22         15            010            29.49              30.01
	3  13904  20110101   353           12        OVC065  ...                27          7            350            29.51              30.03
	4  13904  20110101   453           12        BKN070  ...                25         11            020            29.51              30.04
	[5 rows x 17 columns]

	INFO:
	<class 'pandas.core.frame.DataFrame'>
	RangeIndex: 10337 entries, 0 to 10336
	Data columns (total 17 columns):
	Wban                  10337 non-null int64
	date                  10337 non-null int64
	Time                  10337 non-null int64
	StationType           10337 non-null int64
	sky_condition         10337 non-null object
	visibility            10325 non-null object
	dry_bulb_faren        10337 non-null object
	dry_bulb_cel          10337 non-null object
	wet_bulb_faren        10337 non-null object
	wet_bulb_cel          10337 non-null object
	dew_point_faren       10337 non-null object
	dew_point_cel         10337 non-null object
	relative_humidity     10337 non-null object
	wind_speed            10337 non-null object
	wind_direction        10337 non-null object
	station_pressure      10337 non-null object
	sea_level_pressure    10337 non-null object
	dtypes: int64(4), object(13)
	memory usage: 1.3+ MB
	None
________________________________________________________
IPYTHONSHELL:
In [1]: type(df)
	Out[1]: pandas.core.frame.DataFrame

In [2]: df.shape
	Out[2]: (10337, 44)

In [3]: df.head()
	Out[3]: 
	      0         1    2   3       4   ... 39 40 41     42 43
	0  13904  20110101   53  12  OVC045  ...           29.95   
	1  13904  20110101  153  12  OVC049  ...           30.02   
	2  13904  20110101  253  12  OVC060  ...           30.02   
	3  13904  20110101  353  12  OVC065  ...           30.04   
	4  13904  20110101  453  12  BKN070  ...           30.04   
	[5 rows x 44 columns]

In [4]: df.tail()
	Out[4]: 
	          0         1     2   3    4   ... 39 40 41     42 43
	10332  13904  20111231  1953  12  CLR  ...           30.02   
	10333  13904  20111231  2053  12  CLR  ...           30.05   
	10334  13904  20111231  2153  12  CLR  ...           30.06   
	10335  13904  20111231  2253  12  CLR  ...           30.09   
	10336  13904  20111231  2353  12  CLR  ...           30.12   
	[5 rows x 44 columns]

In [5]: df.info()
	<class 'pandas.core.frame.DataFrame'>
	RangeIndex: 10337 entries, 0 to 10336
	Data columns (total 44 columns):
	0     10337 non-null int64
	1     10337 non-null int64
	2     10337 non-null int64
	3     10337 non-null int64
	4     10337 non-null object
	5     10337 non-null object
	6     10325 non-null object
	7     10337 non-null object
	8     10337 non-null object
	9     10337 non-null object
	10    10337 non-null object
	11    10337 non-null object
	12    10337 non-null object
	13    10337 non-null object
	14    10337 non-null object
	15    10337 non-null object
	16    10337 non-null object
	17    10337 non-null object
	18    10337 non-null object
	19    10337 non-null object
	20    10337 non-null object
	21    10337 non-null object
	22    10337 non-null object
	23    10337 non-null object
	24    10337 non-null object
	25    10337 non-null object
	26    10337 non-null object
	27    10337 non-null object
	28    10337 non-null object
	29    10337 non-null object
	30    10337 non-null object
	31    10337 non-null object
	32    10337 non-null object
	33    10337 non-null object
	34    10337 non-null object
	35    10337 non-null object
	36    10337 non-null object
	37    10337 non-null object
	38    10337 non-null object
	39    10337 non-null object
	40    10337 non-null object
	41    10337 non-null object
	42    10337 non-null object
	43    10337 non-null object
	dtypes: int64(4), object(40)
	memory usage: 3.5+ MB

In [6]: type(column_labels)
	Out[6]: str

In [7]: column_labels
	Out[7]: 'Wban,date,Time,StationType,
                 sky_condition,sky_conditionFlag,
                 visibility,visibilityFlag,
                 wx_and_obst_to_vision,
                 wx_and_obst_to_visionFlag,dry_bulb_faren,
                 dry_bulb_farenFlag,dry_bulb_cel,
                 dry_bulb_celFlag,wet_bulb_faren,
                 wet_bulb_farenFlag,wet_bulb_cel,
                 wet_bulb_celFlag,dew_point_faren,
                 dew_point_farenFlag,dew_point_cel,
                 dew_point_celFlag,relative_humidity,
                 relative_humidityFlag,wind_speed,
                 wind_speedFlag,wind_direction,
                 wind_directionFlag,value_for_wind_character,
                 value_for_wind_characterFlag,
                 station_pressure,station_pressureFlag,
                 pressure_tendency,pressure_tendencyFlag,
                 presschange,presschangeFlag,
                 sea_level_pressure,sea_level_pressureFlag,
                 record_type,hourly_precip,hourly_precipFlag,
                 altimeter,altimeterFlag,junk'

In [8]: type(list_to_drop)
	Out[8]: list

In [9]: list_to_drop
	Out[9]: 
	['sky_conditionFlag',
	 'visibilityFlag',
	 'wx_and_obst_to_vision',
	 'wx_and_obst_to_visionFlag',
	 'dry_bulb_farenFlag',
	 'dry_bulb_celFlag',
	 'wet_bulb_farenFlag',
	 'wet_bulb_celFlag',
	 'dew_point_farenFlag',
	 'dew_point_celFlag',
	 'relative_humidityFlag',
	 'wind_speedFlag',
	 'wind_directionFlag',
	 'value_for_wind_character',
	 'value_for_wind_characterFlag',
	 'station_pressureFlag',
	 'pressure_tendencyFlag',
	 'pressure_tendency',
	 'presschange',
	 'presschangeFlag',
	 'sea_level_pressureFlag',
	 'hourly_precip',
	 'hourly_precipFlag',
	 'altimeter',
	 'record_type',
	 'altimeterFlag',
	 'junk']
________________________________________________________
INSTRUCTION:
1. Convert the comma separated string column_labels 
   to a list of strings using .split(','). Assign the 
   result to column_labels_list.
2. Reassign df.columns using the list of strings 
   column_labels_list.
3. Call df.drop() with list_to_drop and 
   axis='columns'. Assign the result to df_dropped.
4. Print df_dropped.head() to examine the result. 
   This has already been done for you.
________________________________________________________
GUIDE:
Re-assigning column names
After the initial step of reading in the data, the 
next step is to clean and tidy it so that it is easier 
to work with.

In this exercise, you will begin this cleaning process 
by re-assigning column names and dropping unnecessary 
columns.

pandas has been imported in the workspace as pd, and 
the file NOAA_QCLCD_2011_hourly_13904.txt has been 
parsed and loaded into a DataFrame df. The comma 
separated string of column names, column_labels, and 
list of columns to drop, list_to_drop, have also been 
loaded for you.
________________________________________________________
