# Print the dry_bulb_faren temperature between 8 AM and 9 AM on June 20, 2011
print(df_clean.loc["2011-06-20 08:00:00":"2011-06-20 09:00:00", "dry_bulb_faren"])

# Convert the dry_bulb_faren column to numeric values: df_clean['dry_bulb_faren']
df_clean['dry_bulb_faren'] = pd.to_numeric(df_clean['dry_bulb_faren'], errors="coerce")

# Print the transformed dry_bulb_faren temperature between 8 AM and 9 AM on June 20, 2011
print(df_clean.loc["2011-06-20 08:00:00":"2011-06-20 09:00:00", "dry_bulb_faren"])

# Convert the wind_speed and dew_point_faren columns to numeric values
df_clean['wind_speed'] = pd.to_numeric(df_clean.wind_speed, errors="coerce")
df_clean['dew_point_faren'] = pd.to_numeric(df_clean.dew_point_faren, errors="coerce")
________________________________________________________
OUT:
	2011-06-20 08:27:00     M
	2011-06-20 08:28:00     M
	2011-06-20 08:29:00     M
	2011-06-20 08:30:00     M
	2011-06-20 08:31:00     M
	2011-06-20 08:32:00     M
	2011-06-20 08:33:00     M
	2011-06-20 08:34:00     M
	2011-06-20 08:35:00     M
	2011-06-20 08:53:00    83
	Name: dry_bulb_faren, dtype: object

	2011-06-20 08:27:00     NaN
	2011-06-20 08:28:00     NaN
	2011-06-20 08:29:00     NaN
	2011-06-20 08:30:00     NaN
	2011-06-20 08:31:00     NaN
	2011-06-20 08:32:00     NaN
	2011-06-20 08:33:00     NaN
	2011-06-20 08:34:00     NaN
	2011-06-20 08:35:00     NaN
	2011-06-20 08:53:00    83.0
	Name: dry_bulb_faren, dtype: float64
________________________________________________________
IPYTHONSHELL:
In [1]: type(df_clean)
	Out[1]: pandas.core.frame.DataFrame

In [2]: df_clean.shape
	Out[2]: (10337, 17)

In [3]: df_clean.head()
	Out[3]: 
	                      Wban      date    Time  StationType sky_condition  ... relative_humidity wind_speed wind_direction station_pressure sea_level_pressure
	2011-01-01 00:53:00  13904  20110101  005300           12        OVC045  ...                24         15            360            29.42              29.95
	2011-01-01 01:53:00  13904  20110101  015300           12        OVC049  ...                23         10            340            29.49              30.01
	2011-01-01 02:53:00  13904  20110101  025300           12        OVC060  ...                22         15            010            29.49              30.01
	2011-01-01 03:53:00  13904  20110101  035300           12        OVC065  ...                27          7            350            29.51              30.03
	2011-01-01 04:53:00  13904  20110101  045300           12        BKN070  ...                25         11            020            29.51              30.04
	[5 rows x 17 columns]

In [4]: df_clean.tail()
	Out[4]: 
	                      Wban      date    Time  StationType sky_condition  ... relative_humidity wind_speed wind_direction station_pressure sea_level_pressure
	2011-12-31 19:53:00  13904  20111231  195300           12           CLR  ...                69          5            200            29.49              30.03
	2011-12-31 20:53:00  13904  20111231  205300           12           CLR  ...                80          0            000            29.52              30.05
	2011-12-31 21:53:00  13904  20111231  215300           12           CLR  ...                80          0            000            29.53              30.06
	2011-12-31 22:53:00  13904  20111231  225300           12           CLR  ...                83          3            150            29.56              30.09
	2011-12-31 23:53:00  13904  20111231  235300           12           CLR  ...                93          3            260            29.59              30.11
	[5 rows x 17 columns]

In [5]: df_clean.info()
	<class 'pandas.core.frame.DataFrame'>
	DatetimeIndex: 10337 entries, 2011-01-01 00:53:00 to 2011-12-31 23:53:00
	Data columns (total 17 columns):
	Wban                  10337 non-null int64
	date                  10337 non-null object
	Time                  10337 non-null object
	StationType           10337 non-null int64
	sky_condition         10337 non-null object
	visibility            10325 non-null object
	dry_bulb_faren        10337 non-null object
	dry_bulb_cel          10337 non-null object
	wet_bulb_faren        10337 non-null object
	wet_bulb_cel          10337 non-null object
	dew_point_faren       10337 non-null object
	dew_point_cel         10337 non-null object
	relative_humidity     10337 non-null object
	wind_speed            10337 non-null object
	wind_direction        10337 non-null object
	station_pressure      10337 non-null object
	sea_level_pressure    10337 non-null object
	dtypes: int64(2), object(15)
	memory usage: 1.7+ MB
________________________________________________________
INSTRUCTION:
1. Print the 'dry_bulb_faren' temperature between 8 AM 
   and 9 AM on June 20, 2011.
2. Convert the 'dry_bulb_faren' column to numeric values 
   with pd.to_numeric(). Specify errors='coerce'.
3. Print the transformed dry_bulb_faren temperature 
   between 8 AM and 9 AM on June 20, 2011.
4. Convert the 'wind_speed' and 'dew_point_faren' 
   columns to numeric values with pd.to_numeric(). 
   Again, specify errors='coerce'.
________________________________________________________
GUIDE:
Cleaning the numeric columns
The numeric columns contain missing values labeled as 'M'. In this exercise, your job is to transform these columns such that they contain only numeric values and interpret missing data as NaN.

The pandas function pd.to_numeric() is ideal for this purpose: It converts a Series of values to floating-point values. Furthermore, by specifying the keyword argument errors='coerce', you can force strings like 'M' to be interpreted as NaN.

A DataFrame df_clean is provided for you at the start of the exercise, and as usual, pandas has been imported as pd.
________________________________________________________
