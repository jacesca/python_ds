# Convert the date column to string: df_dropped['date']
df_dropped['date'] = df_dropped["date"].astype(str)

# Regular expressions
# Pad leading zeros to the Time column: df_dropped['Time']
# Alinea a la derecha y rellena de ceros una cadena de 4 caracteres
df_dropped['Time'] = df_dropped['Time'].apply(lambda x:'{:0>4}'.format(x))

# Concatenate the new date and Time columns: date_string
date_string = df_dropped["date"]+df_dropped["Time"]
print("**** New date_string ****")
print("Type: ",type(date_string))
print(date_string.head())

# Convert the date_string Series to datetime: date_times
date_times = pd.to_datetime(date_string, format='%Y%m%d%H%M')
print("**** New date_times ****")
print("Type: ",type(date_times))
print(date_times.head())

# Set the index to be the new date_times container: df_clean
df_clean = df_dropped.set_index(date_times)

# Print the output of df_clean.head()
print("**** New df_clean ****")
print("Type: ",type(df_clean))
print(df_clean.head())
print(df_clean.tail())
________________________________________________________
OUT:
	**** New date_string ****
	Type:  <class 'pandas.core.series.Series'>
	0    201101010053
	1    201101010153
	2    201101010253
	3    201101010353
	4    201101010453
	dtype: object
	
	**** New date_times ****
	Type:  <class 'pandas.core.series.Series'>
	0   2011-01-01 00:53:00
	1   2011-01-01 01:53:00
	2   2011-01-01 02:53:00
	3   2011-01-01 03:53:00
	4   2011-01-01 04:53:00
	dtype: datetime64[ns]

	**** New df_clean ****
	Type:  <class 'pandas.core.frame.DataFrame'>
	                      Wban      date  Time  StationType sky_condition  ... relative_humidity wind_speed wind_direction station_pressure sea_level_pressure
	2011-01-01 00:53:00  13904  20110101  0053           12        OVC045  ...                24         15            360            29.42              29.95
	2011-01-01 01:53:00  13904  20110101  0153           12        OVC049  ...                23         10            340            29.49              30.01
	2011-01-01 02:53:00  13904  20110101  0253           12        OVC060  ...                22         15            010            29.49              30.01
	2011-01-01 03:53:00  13904  20110101  0353           12        OVC065  ...                27          7            350            29.51              30.03
	2011-01-01 04:53:00  13904  20110101  0453           12        BKN070  ...                25         11            020            29.51              30.04
	[5 rows x 17 columns]
	                      Wban      date  Time  StationType sky_condition  ... relative_humidity wind_speed wind_direction station_pressure sea_level_pressure
	2011-12-31 19:53:00  13904  20111231  1953           12           CLR  ...                69          5            200            29.49              30.03
	2011-12-31 20:53:00  13904  20111231  2053           12           CLR  ...                80          0            000            29.52              30.05
	2011-12-31 21:53:00  13904  20111231  2153           12           CLR  ...                80          0            000            29.53              30.06
	2011-12-31 22:53:00  13904  20111231  2253           12           CLR  ...                83          3            150            29.56              30.09
	2011-12-31 23:53:00  13904  20111231  2353           12           CLR  ...                93          3            260            29.59              30.11
	[5 rows x 17 columns]
________________________________________________________
IPYTHONSHELL:
In [1]: type(df_dropped)
	Out[1]: pandas.core.frame.DataFrame

In [2]: df_dropped.shape
	Out[2]: (10337, 17)

In [3]: df_dropped.head()
	Out[3]: 
	    Wban      date  Time  StationType sky_condition  ... relative_humidity wind_speed wind_direction station_pressure sea_level_pressure
	0  13904  20110101    53           12        OVC045  ...                24         15            360            29.42              29.95
	1  13904  20110101   153           12        OVC049  ...                23         10            340            29.49              30.01
	2  13904  20110101   253           12        OVC060  ...                22         15            010            29.49              30.01
	3  13904  20110101   353           12        OVC065  ...                27          7            350            29.51              30.03
	4  13904  20110101   453           12        BKN070  ...                25         11            020            29.51              30.04
	[5 rows x 17 columns]

In [4]: df_dropped.tail()
	Out[4]: 
	        Wban      date  Time  StationType sky_condition  ... relative_humidity wind_speed wind_direction station_pressure sea_level_pressure
	10332  13904  20111231  1953           12           CLR  ...                69          5            200            29.49              30.03
	10333  13904  20111231  2053           12           CLR  ...                80          0            000            29.52              30.05
	10334  13904  20111231  2153           12           CLR  ...                80          0            000            29.53              30.06
	10335  13904  20111231  2253           12           CLR  ...                83          3            150            29.56              30.09
	10336  13904  20111231  2353           12           CLR  ...                93          3            260            29.59              30.11
	[5 rows x 17 columns]

In [5]: df_dropped.info()
	<class 'pandas.core.frame.DataFrame'>
	RangeIndex: 10337 entries, 0 to 10336
	Data columns (total 17 columns):
	Wban                  10337 non-null int64
	date                  10337 non-null int64
	Time                  10337 non-null int64
	StationType           10337 non-null int64
	sky_condition         10337 non-null object
	visibility            10325 non-null object
	dry_bulb_faren        10337 non-null object
	dry_bulb_cel          10337 non-null object
	wet_bulb_faren        10337 non-null object
	wet_bulb_cel          10337 non-null object
	dew_point_faren       10337 non-null object
	dew_point_cel         10337 non-null object
	relative_humidity     10337 non-null object
	wind_speed            10337 non-null object
	wind_direction        10337 non-null object
	station_pressure      10337 non-null object
	sea_level_pressure    10337 non-null object
	dtypes: int64(4), object(13)
	memory usage: 1.3+ MB
________________________________________________________
INSTRUCTION:
1. Convert the 'date' column to a string with 
   .astype(str) and assign to df_dropped['date'].
2. Add leading zeros to the 'Time' column. This has 
   been done for you.
3. Concatenate the new 'date' and 'Time' columns 
   together. Assign to date_string.
4. Convert the date_string Series to datetime values 
   with pd.to_datetime(). Specify the format parameter.
5. Set the index of the df_dropped DataFrame to be 
   date_times. Assign the result to df_clean.
________________________________________________________
GUIDE:
Cleaning and tidying datetime data
In order to use the full power of pandas time series, 
you must construct a DatetimeIndex. To do so, it is 
necessary to clean and transform the date and time 
columns.

The DataFrame df_dropped you created in the last exercise 
is provided for you and pandas has been imported as pd.

Your job is to clean up the date and Time columns and 
combine them into a datetime collection to be used as 
the Index.
________________________________________________________
