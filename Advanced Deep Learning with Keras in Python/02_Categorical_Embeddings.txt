# -*- coding: utf-8 -*-
"""
Created on Tue Sep  3 21:53:05 2019

@author: jacqueline.cortez

Chapter 2. Two Input Networks Using Categorical Embeddings, Shared Layers, and Merge Layers
Introduction:
    In this chapter, you will build two-input networks that use categorical embeddings to represent 
    high-cardinality data, shared layers to specify re-usable building blocks, and merge layers to 
    join multiple inputs to a single output. By the end of this chapter, you will have the 
    foundational building blocks for designing neural networks with complex data flows.
"""
import pandas as pd                                                                 #For loading tabular data
import numpy as np                                                                  #For making operations in lists
import matplotlib.pyplot as plt                                                     #For creating charts

from keras.layers import Embedding                                                  #For DeapLearning
from keras.layers import Flatten                                                    #For DeapLearning
from keras.layers import Input                                                      #For DeapLearning
from keras.layers import Subtract                                                   #For DeapLearning
from keras.models import Model                                                      #For DeapLearning
from keras.utils import plot_model                                                  #For DeapLearning


print("****************************************************")
print("** BEGIN                                          **")
print("****************************************************")
print("** User defined variables \n")

SEED=1

#print("****************************************************")
print("** User Functions\n")

#print("****************************************************")
print("** Getting the data for this program\n")

file = "games_season.csv"
games_season = pd.read_csv(file)
print(games_season.head())
# Split into training and test set
#X_train, X_test, y_train, y_test = train_test_split(games_season.drop(['score_diff'], axis=1), games_season['score_diff'], test_size = 0.19, random_state=SEED)

file = "games_tourney.csv"
games_tourney = pd.read_csv(file)
print(games_tourney.head())

print("****************************************************")
tema = "2. Define team lookup"; print("** %s\n" % tema)

n_teams = np.unique(games_season['team_1']).shape[0] # Count the unique number of teams
team_lookup = Embedding(input_dim=n_teams, output_dim=1, input_length=1, name='team_lookup') # Create an embedding layer

print("****************************************************")
tema = "3. Define team model"; print("** %s\n" % tema)

teamid_in = Input(shape=(1,), name='teamid_in') # Create an input layer for the team ID
strength_lookup = team_lookup(teamid_in) # Lookup the input in the team strength embedding layer
strength_lookup_flat = Flatten(name='strength_lookup_flat')(strength_lookup) # Flatten the output

team_strength_model = Model(teamid_in, strength_lookup_flat, name='Team-Strength-Model') # Combine the operations into a single, re-usable model

# Summarazing the model
print(team_strength_model.summary()) # Summarize the model
plot_model(team_strength_model, to_file='02_03_model.png') # Plot the model

# Plotting the model
plt.figure()
data = plt.imread('02_03_model.png') # Display the image
plt.imshow(data)
plt.title('"team_strength_model" (Embedding Team Number)')
plt.suptitle(tema)
#plt.subplots_adjust(left=0.2, bottom=None, right=None, top=0.88, wspace=0.3, hspace=None)
plt.show()

print("****************************************************")
tema = "5. Defining two inputs"; print("** %s\n" % tema)

team_in_1 = Input(shape=(1,), name="Team-1-In") # Input layer for team 1
team_in_2 = Input(shape=(1,), name="Team-2-In") # Separate input layer for team 2

print("****************************************************")
tema = "6. Lookup both inputs in the same model"; print("** %s\n" % tema)

team_1_strength = team_strength_model(team_in_1) # Lookup team 1 in the team strength model
team_2_strength = team_strength_model(team_in_2) # Lookup team 2 in the team strength model

print("****************************************************")
tema = "8. Output layer using shared layer"; print("** %s\n" % tema)

score_diff = Subtract()([team_1_strength, team_2_strength]) # Create a subtract layer using the inputs from the previous exercise

print("****************************************************")
tema = "9. Model using two inputs and one output"; print("** %s\n" % tema)

model = Model([team_in_1, team_in_2], score_diff) # Create the model
model.compile(optimizer='adam', loss='mean_absolute_error') # Compile the model

# Summarazing the model
print(model.summary()) # Summarize the model
plot_model(model, to_file='02_09_model.png') # Plot the model

# Plotting the model
plt.figure()
data = plt.imread('02_09_model.png') # Display the image
plt.imshow(data)
plt.title('"Shared Layers Model" (Using "team_strength_model")')
plt.suptitle(tema)
#plt.subplots_adjust(left=0.2, bottom=None, right=None, top=0.88, wspace=0.3, hspace=None)
plt.show()

print("****************************************************")
tema = "10. Fit the model to the regular season training data"; print("** %s\n" % tema)

input_1 = games_season['team_1'] # Get the team_1 column from the regular season data
input_2 = games_season['team_2'] # Get the team_2 column from the regular season data

model.fit([input_1, input_2], games_season['score_diff'], 
          epochs=1, batch_size=2048, validation_split=.10, verbose=True) # Fit the model to input 1 and 2, using score diff as a target

print("****************************************************")
tema = "11. Evaluate the model on the tournament test data"; print("** %s\n" % tema)

input_1 = games_tourney['team_1'] # Get team_1 from the tournament data
input_2 = games_tourney['team_2'] # Get team_2 from the tournament data

print(model.evaluate([input_1, input_2], games_tourney['score_diff'], verbose=False)) # Evaluate the model using these inputs

print("****************************************************")
print("** END                                            **")
print("****************************************************")