# Set Index of editions: totals
totals = editions.set_index("Edition")
print(totals.head())

# Reassign totals['Grand Total']: totals
totals = totals["Grand Total"]
print(totals.head())

# Divide medal_counts by totals: fractions
fractions = medal_counts.divide(totals, axis="rows")

# Print first & last 5 rows of fractions
print(fractions.head())
print(fractions.tail())
________________________________________________________
OUT:	
	         Grand Total       City         Country
	Edition                                        
	1896             151     Athens          Greece
	1900             512      Paris          France
	1904             470  St. Louis   United States
	1908             804     London  United Kingdom
	1912             885  Stockholm          Sweden


	Edition
	1896    151
	1900    512
	1904    470
	1908    804
	1912    885
	Name: Grand Total, dtype: int64


	NOC      AFG  AHO  ALG       ANZ  ARG  ...  VIE  YUG  ZAM  ZIM       ZZX
	Edition                                ...                              
	1896     NaN  NaN  NaN       NaN  NaN  ...  NaN  NaN  NaN  NaN  0.039735
	1900     NaN  NaN  NaN       NaN  NaN  ...  NaN  NaN  NaN  NaN  0.066406
	1904     NaN  NaN  NaN       NaN  NaN  ...  NaN  NaN  NaN  NaN  0.017021
	1908     NaN  NaN  NaN  0.023632  NaN  ...  NaN  NaN  NaN  NaN       NaN
	1912     NaN  NaN  NaN  0.011299  NaN  ...  NaN  NaN  NaN  NaN       NaN
	[5 rows x 138 columns]


	NOC          AFG  AHO       ALG  ANZ       ARG  ...       VIE       YUG       ZAM       ZIM  ZZX
	Edition                                         ...                                             
	1992         NaN  NaN  0.001173  NaN  0.001173  ...       NaN       NaN       NaN       NaN  NaN
	1996         NaN  NaN  0.001614  NaN  0.010758  ...       NaN  0.013986  0.000538       NaN  NaN
	2000         NaN  NaN  0.002481  NaN  0.009926  ...  0.000496  0.012903       NaN       NaN  NaN
	2004         NaN  NaN       NaN  NaN  0.023524  ...       NaN       NaN       NaN  0.001502  NaN
	2008     0.00049  NaN  0.000979  NaN  0.024976  ...  0.000490       NaN       NaN  0.001959  NaN
	[5 rows x 138 columns]
________________________________________________________
IPYTHONSHELL:
BEFORE EXECUTE THE EXCERCISE:
##################################################################
# editions                                                       #
##################################################################
In [1]: editions.shape
	Out[1]: (26, 4)

In [2]: editions
	Out[2]: 
	    Edition  Grand Total         City                     Country
	0      1896          151       Athens                      Greece
	1      1900          512        Paris                      France
	2      1904          470    St. Louis               United States
	3      1908          804       London              United Kingdom
	4      1912          885    Stockholm                      Sweden
	5      1920         1298      Antwerp                     Belgium
	6      1924          884        Paris                      France
	7      1928          710    Amsterdam                 Netherlands
	8      1932          615  Los Angeles               United States
	9      1936          875       Berlin                     Germany
	10     1948          814       London              United Kingdom
	11     1952          889     Helsinki                     Finland
	12     1956          885    Melbourne                   Australia
	13     1960          882         Rome                       Italy
	14     1964         1010        Tokyo                       Japan
	15     1968         1031  Mexico City                      Mexico
	16     1972         1185       Munich  West Germany (now Germany)
	17     1976         1305     Montreal                      Canada
	18     1980         1387       Moscow       U.S.S.R. (now Russia)
	19     1984         1459  Los Angeles               United States
	20     1988         1546        Seoul                 South Korea
	21     1992         1705    Barcelona                       Spain
	22     1996         1859      Atlanta               United States
	23     2000         2015       Sydney                   Australia
	24     2004         1998       Athens                      Greece
	25     2008         2042      Beijing                       China

In [3]: editions.info()
	<class 'pandas.core.frame.DataFrame'>
	RangeIndex: 26 entries, 0 to 25
	Data columns (total 4 columns):
	Edition        26 non-null int64
	Grand Total    26 non-null int64
	City           26 non-null object
	Country        26 non-null object
	dtypes: int64(2), object(2)
	memory usage: 912.0+ bytes

In [4]: editions.columns
	Out[4]: Index(['Edition', 'Grand Total', 'City', 'Country'], dtype='object')

In [5]: editions.index
	Out[5]: RangeIndex(start=0, stop=26, step=1)

##################################################################
# medals                                                         #
##################################################################
In [6]: medals.shape
	Out[6]: (29216, 4)

In [7]: medals.head()
	Out[7]: 
	              Athlete  NOC   Medal  Edition
	0       HAJOS, Alfred  HUN    Gold     1896
	1    HERSCHMANN, Otto  AUT  Silver     1896
	2   DRIVAS, Dimitrios  GRE  Bronze     1896
	3  MALOKINIS, Ioannis  GRE    Gold     1896
	4  CHASAPIS, Spiridon  GRE  Silver     1896

In [8]: medals.tail()
	Out[8]: 
                    Athlete  NOC   Medal  Edition
	29211        ENGLICH, Mirko  GER  Silver     2008
	29212  MIZGAITIS, Mindaugas  LTU  Bronze     2008
	29213       PATRIKEEV, Yuri  ARM  Bronze     2008
	29214         LOPEZ, Mijain  CUB    Gold     2008
	29215        BAROEV, Khasan  RUS  Silver     2008

In [9]: medals.info()
	<class 'pandas.core.frame.DataFrame'>
	RangeIndex: 29216 entries, 0 to 29215
	Data columns (total 4 columns):
	Athlete    29216 non-null object
	NOC        29216 non-null object
	Medal      29216 non-null object
	Edition    29216 non-null int64
	dtypes: int64(1), object(3)
	memory usage: 913.1+ KB

In [10]: medals.columns
	Out[10]: Index(['Athlete', 'NOC', 'Medal', 'Edition'], dtype='object')

In [11]: medals.index
	Out[11]: RangeIndex(start=0, stop=29216, step=1)

##################################################################
# medal_counts                                                   #
##################################################################
In [12]: medal_counts.shape
Out[12]: (26, 138)

In [13]: medal_counts
	Out[13]: 
	NOC      AFG  AHO  ALG   ANZ   ARG  ...  VIE   YUG  ZAM   ZIM   ZZX
	Edition                             ...                            
	1896     NaN  NaN  NaN   NaN   NaN  ...  NaN   NaN  NaN   NaN   6.0
	1900     NaN  NaN  NaN   NaN   NaN  ...  NaN   NaN  NaN   NaN  34.0
	1904     NaN  NaN  NaN   NaN   NaN  ...  NaN   NaN  NaN   NaN   8.0
	1908     NaN  NaN  NaN  19.0   NaN  ...  NaN   NaN  NaN   NaN   NaN
	1912     NaN  NaN  NaN  10.0   NaN  ...  NaN   NaN  NaN   NaN   NaN
	1920     NaN  NaN  NaN   NaN   NaN  ...  NaN   NaN  NaN   NaN   NaN
	1924     NaN  NaN  NaN   NaN  11.0  ...  NaN   2.0  NaN   NaN   NaN
	1928     NaN  NaN  NaN   NaN  32.0  ...  NaN  12.0  NaN   NaN   NaN
	1932     NaN  NaN  NaN   NaN   4.0  ...  NaN   NaN  NaN   NaN   NaN
	1936     NaN  NaN  NaN   NaN  11.0  ...  NaN   1.0  NaN   NaN   NaN
	1948     NaN  NaN  NaN   NaN  12.0  ...  NaN  16.0  NaN   NaN   NaN
	1952     NaN  NaN  NaN   NaN   6.0  ...  NaN  24.0  NaN   NaN   NaN
	1956     NaN  NaN  NaN   NaN   2.0  ...  NaN  23.0  NaN   NaN   NaN
	1960     NaN  NaN  NaN   NaN   4.0  ...  NaN  17.0  NaN   NaN   NaN
	1964     NaN  NaN  NaN   NaN   1.0  ...  NaN  15.0  NaN   NaN   NaN
	1968     NaN  NaN  NaN   NaN   2.0  ...  NaN  29.0  NaN   NaN   NaN
	1972     NaN  NaN  NaN   NaN   1.0  ...  NaN  18.0  NaN   NaN   NaN
	1976     NaN  NaN  NaN   NaN   NaN  ...  NaN  19.0  NaN   NaN   NaN
	1980     NaN  NaN  NaN   NaN   NaN  ...  NaN  57.0  NaN  16.0   NaN
	1984     NaN  NaN  2.0   NaN   NaN  ...  NaN  87.0  1.0   NaN   NaN
	1988     NaN  1.0  NaN   NaN  13.0  ...  NaN  63.0  NaN   NaN   NaN
	1992     NaN  NaN  2.0   NaN   2.0  ...  NaN   NaN  NaN   NaN   NaN
	1996     NaN  NaN  3.0   NaN  20.0  ...  NaN  26.0  1.0   NaN   NaN
	2000     NaN  NaN  5.0   NaN  20.0  ...  1.0  26.0  NaN   NaN   NaN
	2004     NaN  NaN  NaN   NaN  47.0  ...  NaN   NaN  NaN   3.0   NaN
	2008     1.0  NaN  2.0   NaN  51.0  ...  1.0   NaN  NaN   4.0   NaN
	[26 rows x 138 columns]

In [14]: medal_counts.info()
	<class 'pandas.core.frame.DataFrame'>
	Int64Index: 26 entries, 1896 to 2008
	Columns: 138 entries, AFG to ZZX
	dtypes: float64(138)
	memory usage: 29.5 KB

In [15]: medal_counts.columns
	Out[15]: 
	Index(['AFG', 'AHO', 'ALG', 'ANZ', 'ARG', 'ARM', 'AUS', 'AUT', 'AZE', 'BAH',

	       ...

	       'URS', 'URU', 'USA', 'UZB', 'VEN', 'VIE', 'YUG', 'ZAM', 'ZIM', 'ZZX'],
	     dtype='object', name='NOC', length=138) 
                  
In [16]: medal_counts.index
	Out[16]: 
	Int64Index([1896, 1900, 1904, 1908, 1912, 1920, 1924, 1928, 1932, 1936, 1948, 
                    1952, 1956, 1960, 1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 
                    1996, 2000, 2004, 2008], 
                  dtype='int64', name='Edition')

AFTER EXECUTE THE EXCERCISE:

________________________________________________________
INSTRUCTION:

1. Set the index of the DataFrame editions to be 'Edition' 
   (using the method .set_index()). Save the result as totals.
2. Extract the 'Grand Total' column from totals and assign 
   the result back to totals.
3. Divide the DataFrame medal_counts by totals along each row. 
   You will have to use the .divide() method with the option 
   axis='rows'. Assign the result to fractions.
4. Print first & last 5 rows of the DataFrame fractions. 
   This has been done for you, so hit 'Submit Answer' to 
   see the results!
________________________________________________________
GUIDE:

Computing fraction of medals per Olympic edition

In this exercise, you'll start with the DataFrames editions, 
medals, & medal_counts from prior exercises.

You can extract a Series with the total number of medals awarded 
in each Olympic edition.

The DataFrame medal_counts can be divided row-wise by the total 
number of medals awarded each edition; the method .divide() performs 
the broadcast as you require.

This gives you a normalized indication of each country's performance 
in each edition.
________________________________________________________
DATA SOURCE:

https://www.theguardian.com/sport/datablog/2012/jun/25/olympic-medal-winner-list-data
________________________________________________________
