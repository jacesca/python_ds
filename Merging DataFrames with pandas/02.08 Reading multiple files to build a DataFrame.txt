import pandas as pd

for medal in medal_types:

    # Create the file name: file_name
    file_name = "%s_top5.csv" % medal
    
    # Create list of column names: columns
    columns = ['Country', medal]
    
    # Read file_name into a DataFrame: df
    medal_df = pd.read_csv(file_name, header=0, index_col="Country", names=columns)

    # Append medal_df to medals
    medals.append(medal_df)

# Concatenate medals horizontally: medals
medals = pd.concat(medals, axis="columns")

# Print medals
print(medals)
________________________________________________________
OUT:	
	                bronze  silver    gold
	France           475.0   461.0     NaN
	Germany          454.0     NaN   407.0
	Italy              NaN   394.0   460.0
	Soviet Union     584.0   627.0   838.0
	United Kingdom   505.0   591.0   498.0
	United States   1052.0  1195.0  2088.0
________________________________________________________
IPYTHONSHELL:
BEFORE EXECUTE THE EXCERCISE:
In [1]: !dir
	bronze_top5.csv  gold_top5.csv	silver_top5.csv

In [2]: type(medals),type(medal_types)
	Out[2]: (list, list)

In [3]: medals
	Out[3]: []

In [4]: medal_types
	Out[4]: ['bronze', 'silver', 'gold']

#Regular expression, script
#Inserta en la posición %s, el string que esta despues del operador %
In [5]: file_name = ""
In [6]: medal = "bronze"
In [7]: file_name = "%s_top5.csv" % medal
In [8]: file_name
	Out[8]: 'bronze_top5.csv'

In [9]: "%s_top5.csv" % "silver"
	Out[9]: 'silver_top5.csv'

AFTER EXECUTE THE EXCERCISE:

________________________________________________________
INSTRUCTION:

1. Iterate over medal_types in the for loop.
2. Inside the for loop:
   - Create file_name using string interpolation with 
     the loop variable medal. This has been done for 
     you. The expression "%s_top5.csv" % medal evaluates 
     as a string with the value of medal replacing %s in 
     the format string.
   - Create the list of column names called columns. This 
     has been done for you.
   - Read file_name into a DataFrame called medal_df. 
     Specify the keyword arguments header=0, 
     index_col='Country', and names=columns to get the 
     correct row and column Indexes.
   - Append medal_df to medals using the list 
     .append() method.
3. Concatenate the list of DataFrames medals horizontally 
   (using axis='columns') to create a single DataFrame 
   called medals. Print it in its entirety.
________________________________________________________
GUIDE:

Reading multiple files to build a DataFrame
It is often convenient to build a large DataFrame by 
parsing many files as DataFrames and concatenating them 
all at once. You'll do this here with three files, but, 
in principle, this approach can be used to combine data 
from dozens or hundreds of files.

Here, you'll work with DataFrames compiled from The 
Guardian's Olympic medal dataset.

pandas has been imported as pd and two lists have been 
pre-loaded: An empty list called medals, and medal_types, 
which contains the strings 'bronze', 'silver', and 'gold'.
________________________________________________________
DATA SOURCE:

https://www.theguardian.com/sport/datablog/2012/jun/25/olympic-medal-winner-list-data
________________________________________________________
