# Import pandas
import pandas as pd

# Create empty dictionary: medals_dict
medals_dict = {}

# Read the first file and print the columns of the complete dataframe.
print(pd.read_csv("summer_1896.csv").columns)
   
for year in editions['Edition']:
    # Regular expressions
    # Create the file path: file_path
    file_path = 'summer_{:d}.csv'.format(year)
    
    # Load file_path into a DataFrame: medals_dict[year]
    medals_dict[year] = pd.read_csv(file_path)
    
    # Extract relevant columns: medals_dict[year]
    medals_dict[year] = medals_dict[year][['Athlete', 'NOC', 'Medal']]
    
    # Assign year to column 'Edition' of medals_dict
    medals_dict[year]['Edition'] = year
    
# Concatenate medals_dict: medals
medals = pd.concat(medals_dict, ignore_index=True)

# Print first and last 5 rows of medals
print(medals.head())
print(medals.tail())

# Print shape of medals
print(medals.shape)
________________________________________________________
OUT:	
	Index(['Sport', 'Discipline', 'Athlete', 'NOC', 
	       'Gender', 'Event', 'Event_gender', 'Medal'], 
            dtype='object')


	              Athlete  NOC   Medal  Edition
	0       HAJOS, Alfred  HUN    Gold     1896
	1    HERSCHMANN, Otto  AUT  Silver     1896
	2   DRIVAS, Dimitrios  GRE  Bronze     1896
	3  MALOKINIS, Ioannis  GRE    Gold     1896
	4  CHASAPIS, Spiridon  GRE  Silver     1896


	                    Athlete  NOC   Medal  Edition
	29211        ENGLICH, Mirko  GER  Silver     2008
	29212  MIZGAITIS, Mindaugas  LTU  Bronze     2008
	29213       PATRIKEEV, Yuri  ARM  Bronze     2008
	29214         LOPEZ, Mijain  CUB    Gold     2008
	29215        BAROEV, Khasan  RUS  Silver     2008


	(29216, 4)
________________________________________________________
IPYTHONSHELL:
BEFORE EXECUTE THE EXCERCISE:
In [1]: !dir
	summer_1896.csv  summer_1928.csv  summer_1964.csv  summer_1992.csv
	summer_1900.csv  summer_1932.csv  summer_1968.csv  summer_1996.csv
	summer_1904.csv  summer_1936.csv  summer_1972.csv  summer_2000.csv
	summer_1908.csv  summer_1948.csv  summer_1976.csv  summer_2004.csv
	summer_1912.csv  summer_1952.csv  summer_1980.csv  summer_2008.csv
	summer_1920.csv  summer_1956.csv  summer_1984.csv
	summer_1924.csv  summer_1960.csv  summer_1988.csv

In [2]: editions.shape
	Out[2]: (26, 4)

In [3]: editions.info()
	<class 'pandas.core.frame.DataFrame'>
	RangeIndex: 26 entries, 0 to 25
	Data columns (total 4 columns):
	Edition        26 non-null int64
	Grand Total    26 non-null int64
	City           26 non-null object
	Country        26 non-null object
	dtypes: int64(2), object(2)
	memory usage: 912.0+ bytes

In [4]: editions
	Out[4]: 
	    Edition  Grand Total         City                     Country
	0      1896          151       Athens                      Greece
	1      1900          512        Paris                      France
	2      1904          470    St. Louis               United States
	3      1908          804       London              United Kingdom
	4      1912          885    Stockholm                      Sweden
	5      1920         1298      Antwerp                     Belgium
	6      1924          884        Paris                      France
	7      1928          710    Amsterdam                 Netherlands
	8      1932          615  Los Angeles               United States
	9      1936          875       Berlin                     Germany
	10     1948          814       London              United Kingdom
	11     1952          889     Helsinki                     Finland
	12     1956          885    Melbourne                   Australia
	13     1960          882         Rome                       Italy
	14     1964         1010        Tokyo                       Japan
	15     1968         1031  Mexico City                      Mexico
	16     1972         1185       Munich  West Germany (now Germany)
	17     1976         1305     Montreal                      Canada
	18     1980         1387       Moscow       U.S.S.R. (now Russia)
	19     1984         1459  Los Angeles               United States
	20     1988         1546        Seoul                 South Korea
	21     1992         1705    Barcelona                       Spain
	22     1996         1859      Atlanta               United States
	23     2000         2015       Sydney                   Australia
	24     2004         1998       Athens                      Greece
	25     2008         2042      Beijing                       China

AFTER EXECUTE THE EXCERCISE:

________________________________________________________
INSTRUCTION:

1. Within the for loop:
   - Create the file path. This has been done for you.
   - Read file_path into a DataFrame. Assign the result 
     to the year key of medals_dict.
   - Select only the columns 'Athlete', 'NOC', and 'Medal' 
     from medals_dict[year].
   - Create a new column called 'Edition' in the DataFrame 
     medals_dict[year] whose entries are all year.
2. Concatenate the dictionary of DataFrames medals_dict 
   into a DataFame called medals. Specify the keyword 
   argument ignore_index=True to prevent repeated integer 
   indices.
3. Print the first and last 5 rows of medals. This has 
   been done for you, so hit 'Submit Answer' to see the 
   result!
________________________________________________________
GUIDE:

Building medals DataFrame

Here, you'll start with the DataFrame editions from the 
revious exercise.

You have a sequence of files 
summer_1896.csv, summer_1900.csv, ..., summer_2008.csv, 
one for each Olympic edition (year).

You will build up a dictionary medals_dict with the Olympic 
editions (years) as keys and DataFrames as values.

The dictionary is built up inside a loop over the year of 
each Olympic edition (from the Index of editions).

Once the dictionary of DataFrames is built up, you will 
combine the DataFrames using pd.concat().
________________________________________________________
DATA SOURCE:

https://www.theguardian.com/sport/datablog/2012/jun/25/olympic-medal-winner-list-data
________________________________________________________
