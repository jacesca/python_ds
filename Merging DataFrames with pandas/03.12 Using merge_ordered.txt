import pandas as pd

# Perform the first ordered merge: tx_weather
tx_weather = pd.merge_ordered(austin, houston)

# Print tx_weather
print(tx_weather)

# Perform the second ordered merge: tx_weather_suff
tx_weather_suff = pd.merge_ordered(austin, houston, on="date", suffixes=["_aus", "_hus"])

# Print tx_weather_suff
print(tx_weather_suff)

# Perform the third ordered merge: tx_weather_ffill
tx_weather_ffill = pd.merge_ordered(austin, houston, on="date", suffixes=["_aus", "_hus"], fill_method="ffill")

# Print tx_weather_ffill
print(tx_weather_ffill)
________________________________________________________
OUT:	
	        date ratings
	0 2016-01-01  Cloudy
	1 2016-01-04   Rainy
	2 2016-01-17   Sunny
	3 2016-02-08  Cloudy
	4 2016-03-01   Sunny

	        date ratings_aus ratings_hus
	0 2016-01-01      Cloudy      Cloudy
	1 2016-01-04         NaN       Rainy
	2 2016-01-17       Sunny         NaN
	3 2016-02-08      Cloudy         NaN
	4 2016-03-01         NaN       Sunny

	        date ratings_aus ratings_hus
	0 2016-01-01      Cloudy      Cloudy
	1 2016-01-04      Cloudy       Rainy
	2 2016-01-17       Sunny       Rainy
	3 2016-02-08      Cloudy       Rainy
	4 2016-03-01      Cloudy       Sunny
________________________________________________________
IPYTHONSHELL:
BEFORE EXECUTE THE EXCERCISE:
In [1]: austin
	Out[1]: 
	        date ratings
	0 2016-01-01  Cloudy
	1 2016-02-08  Cloudy
	2 2016-01-17   Sunny

In [2]: houston
	Out[2]: 
	        date ratings
	0 2016-01-04   Rainy
	1 2016-01-01  Cloudy
	2 2016-03-01   Sunny

AFTER EXECUTE THE EXCERCISE:

________________________________________________________
INSTRUCTION:

1. Perform an ordered merge on austin and houston using 
   pd.merge_ordered(). Store the result as tx_weather.
2. Print tx_weather. You should notice that the rows are 
   sorted by the date but it is not possible to tell which 
   observation came from which city.
3. Perform another ordered merge on austin and houston.
   - This time, specify the keyword arguments on='date' 
     and suffixes=['_aus','_hus'] so that the rows can be 
     distinguished. Store the result as tx_weather_suff.
4. Print tx_weather_suff to examine its contents. This 
   has been done for you.
5. Perform a third ordered merge on austin and houston.
   - This time, in addition to the on and suffixes parameters, 
     specify the keyword argument fill_method='ffill' to use 
     forward-filling to replace NaN entries with the most 
     recent non-null entry, and hit 'Submit Answer' to examine 
     the contents of the merged DataFrames!
________________________________________________________
GUIDE:

Using merge_ordered()
This exercise uses pre-loaded DataFrames austin and houston 
that contain weather data from the cities Austin and Houston 
respectively. They have been printed in the IPython Shell for 
you to examine.

	austin
	        date ratings
	0 2016-01-01  Cloudy
	1 2016-02-08  Cloudy
	2 2016-01-17   Sunny
	
	houston
	        date ratings
	0 2016-01-04   Rainy
	1 2016-01-01  Cloudy
	2 2016-03-01   Sunny

Weather conditions were recorded on separate days and you need 
to merge these two DataFrames together such that the dates are 
ordered. To do this, you'll use pd.merge_ordered(). After you're 
done, note the order of the rows before and after merging.
________________________________________________________
