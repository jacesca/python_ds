# Create a list of weather_max and weather_mean
weather_list = [weather_max, weather_mean]

# Concatenate weather_list horizontally
weather = pd.concat(weather_list, axis=1)

# Print weather
print(weather)

ordered = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
weather = weather.reindex(ordered)
print(weather)
________________________________________________________
OUT:	
		     Max TemperatureF  Mean TemperatureF
	Apr              89.0          53.100000
	Aug               NaN          70.000000
	Dec               NaN          34.935484
	Feb               NaN          28.714286
	Jan              68.0          32.354839
	Jul              91.0          72.870968
	Jun               NaN          70.133333
	Mar               NaN          35.000000
	May               NaN          62.612903
	Nov               NaN          39.800000
	Oct              84.0          55.451613
	Sep               NaN          63.766667

	     Max TemperatureF  Mean TemperatureF
	Jan              68.0          32.354839
	Feb               NaN          28.714286
	Mar               NaN          35.000000
	Apr              89.0          53.100000
	May               NaN          62.612903
	Jun               NaN          70.133333
	Jul              91.0          72.870968
	Aug               NaN          70.000000
	Sep               NaN          63.766667
	Oct              84.0          55.451613
	Nov               NaN          39.800000
	Dec               NaN          34.935484
________________________________________________________
IPYTHONSHELL:
BEFORE EXECUTE THE EXCERCISE:
In [1]: !ls
	monthly_mean_temp.csv  quarterly_max_temp.csv

In [2]: weather_max.shape, weather_mean.shape
	Out[2]: ((4, 1), (12, 1))

In [3]: weather_max.head()
	Out[3]: 
	       Max TemperatureF
	Month                  
	Jan                  68
	Apr                  89
	Jul                  91
	Oct                  84

In [4]: weather_mean.head()
	Out[4]: 
	       Mean TemperatureF
	Month                   
	Apr            53.100000
	Aug            70.000000
	Dec            34.935484
	Feb            28.714286
	Jan            32.354839

In [5]: weather_max.info()
	<class 'pandas.core.frame.DataFrame'>
	Index: 4 entries, Jan to Oct
	Data columns (total 1 columns):
	Max TemperatureF    4 non-null int64
	dtypes: int64(1)
	memory usage: 224.0+ bytes

In [6]: weather_mean.info()
	<class 'pandas.core.frame.DataFrame'>
	Index: 12 entries, Apr to Sep
	Data columns (total 1 columns):
	Mean TemperatureF    12 non-null float64
	dtypes: float64(1)
	memory usage: 512.0+ bytes

In [7]: weather_max.index
	Out[7]: Index(['Jan', 'Apr', 'Jul', 'Oct'], 
                    dtype='object', name='Month')

In [8]: weather_mean.index
	Out[8]: Index(['Apr', 'Aug', 'Dec', 'Feb', 
                       'Jan', 'Jul', 'Jun', 'Mar', 
                       'May', 'Nov', 'Oct', 'Sep'], 
                    dtype='object', name='Month')

AFTER EXECUTE THE EXCERCISE:

________________________________________________________
INSTRUCTION:

1. Create a 'year' column in the DataFrames names_1881 
   and names_1981, with values of 1881 and 1981 
   respectively. Recall that assigning a scalar value 
   to a DataFrame column broadcasts that value throughout.
2. Create a new DataFrame called combined_names by 
   appending the rows of names_1981 underneath the rows 
   of names_1881. Specify the keyword argument 
   ignore_index=True to make a new RangeIndex of unique 
   integers for each row.
3. Print the shapes of all three DataFrames. This has 
   been done for you.
4. Extract all rows from combined_names that have the 
   name 'Morgan'. To do this, use the .loc[] accessor 
   with an appropriate filter. The relevant column of 
   combined_names here is 'name'.
________________________________________________________
GUIDE:

Concatenating pandas DataFrames along column axis
The function pd.concat() can concatenate DataFrames 
horizontally as well as vertically (vertical is the default). 
To make the DataFrames stack horizontally, you have to 
specify the keyword argument axis=1 or axis='columns'.

In this exercise, you'll use weather data with maximum and 
mean daily temperatures sampled at different rates (quarterly 
versus monthly). You'll concatenate the rows of both and see 
that, where rows are missing in the coarser DataFrame, null 
values are inserted in the concatenated DataFrame. This 
corresponds to an outer join (which you will explore in more 
detail in later exercises).

The files 'quarterly_max_temp.csv' and 'monthly_mean_temp.csv' 
have been pre-loaded into the DataFrames weather_max and 
weather_mean respectively, and pandas has been imported as pd.
________________________________________________________
