# Resample and tidy china: china_annual
china_annual = china.resample("A").last().pct_change(10).dropna()
print("China resample anually: shape, head and tail")
print(china_annual.shape)
print(china_annual.head())
print(china_annual.tail())

# Resample and tidy us: us_annual
us_annual = us.resample("A").last().pct_change(10).dropna()
print("US resample anually: shape, head and tail")
print(us_annual.shape)
print(us_annual.head())
print(us_annual.tail())

# Concatenate china_annual and us_annual: gdp
gdp = pd.concat([china_annual, us_annual], join="inner", axis=1)
print("GDP (China inner join US): shape, head and tail")
print(gdp.shape)
print(gdp.head())
print(gdp.tail())

# Resample gdp and print
print("GDP resample by period of 10 years: ")
print(gdp.resample('10A').last())
________________________________________________________
OUT:	
	China resample anually: shape, head and tail
	(45, 1)
	               China
	Year                
	1971-12-31  0.988860
	1972-12-31  1.402472
	1973-12-31  1.730085
	1974-12-31  1.408556
	1975-12-31  1.311927
	               China
	Year                
	2011-12-31  4.623958
	2012-12-31  4.788074
	2013-12-31  4.752129
	2014-12-31  4.330828
	2015-12-31  3.789936

	US resample anually: shape, head and tail
	(60, 1)
	                  US
	Year                
	1957-12-31  0.827507
	1958-12-31  0.782686
	1959-12-31  0.953137
	1960-12-31  0.689354
	1961-12-31  0.630959
	                  US
	Year                
	2012-12-31  0.467723
	2013-12-31  0.438621
	2014-12-31  0.408368
	2015-12-31  0.361780
	2016-12-31  0.310677

	GDP (China inner join US): shape, head and tail
	(45, 2)
	               China        US
	Year                          
	1971-12-31  0.988860  1.052270
	1972-12-31  1.402472  1.172566
	1973-12-31  1.730085  1.258858
	1974-12-31  1.408556  1.295246
	1975-12-31  1.311927  1.284181
	               China        US
	Year                          
	2011-12-31  4.623958  0.475082
	2012-12-31  4.788074  0.467723
	2013-12-31  4.752129  0.438621
	2014-12-31  4.330828  0.408368
	2015-12-31  3.789936  0.361780

	GDP resample by period of 10 years: 
	               China        US
	Year                          
	1971-12-31  0.988860  1.052270
	1981-12-31  0.972048  1.750922
	1991-12-31  0.962528  0.912380
	2001-12-31  2.492511  0.704219
	2011-12-31  4.623958  0.475082
	2021-12-31  3.789936  0.361780
________________________________________________________
IPYTHONSHELL:
BEFORE EXECUTE THE EXCERCISE:
In [1]: china.shape, us.shape
Out[1]: ((55, 1), (277, 1))

In [2]: china.index, us.index
Out[2]: 
(DatetimeIndex(['1961-01-01', '1962-01-01', '1963-01-01', '1964-01-01', '1965-01-01', '1966-01-01', '1967-01-01', '1968-01-01', '1969-01-01', '1970-01-01', '1971-01-01', '1972-01-01', '1973-01-01',
                '1974-01-01', '1975-01-01', '1976-01-01', '1977-01-01', '1978-01-01', '1979-01-01', '1980-01-01', '1981-01-01', '1982-01-01', '1983-01-01', '1984-01-01', '1985-01-01', '1986-01-01',
                '1987-01-01', '1988-01-01', '1989-01-01', '1990-01-01', '1991-01-01', '1992-01-01', '1993-01-01', '1994-01-01', '1995-01-01', '1996-01-01', '1997-01-01', '1998-01-01', '1999-01-01',
                '2000-01-01', '2001-01-01', '2002-01-01', '2003-01-01', '2004-01-01', '2005-01-01', '2006-01-01', '2007-01-01', '2008-01-01', '2009-01-01', '2010-01-01', '2011-01-01', '2012-01-01',
                '2013-01-01', '2014-01-01', 
                '2015-01-01'],
               dtype='datetime64[ns]', name='Year', freq=None),
 DatetimeIndex(['1947-04-01', '1947-07-01', '1947-10-01', '1948-01-01', '1948-04-01', '1948-07-01', '1948-10-01', '1949-01-01', '1949-04-01', '1949-07-01',
                ...
                '2014-01-01', '2014-04-01', '2014-07-01', '2014-10-01', '2015-01-01', '2015-04-01', '2015-07-01', '2015-10-01', '2016-01-01', 
                '2016-04-01'],
               dtype='datetime64[ns]', name='Year', length=277, freq=None))

AFTER EXECUTE THE EXCERCISE:

________________________________________________________
INSTRUCTION:

1. Make a new DataFrame china_annual by resampling the 
   DataFrame china with .resample('A').last() (i.e., with 
   annual frequency) and chaining two method calls:
2. Chain .pct_change(10) as an aggregation method to compute 
   the percentage change with an offset of ten years.
3. Chain .dropna() to eliminate rows containing null values.
4. Make a new DataFrame us_annual by resampling the DataFrame 
   us exactly as you resampled china.
5. Concatenate china_annual and us_annual to construct a 
   DataFrame called gdp. Use join='inner' to perform an inner 
   join and use axis=1 to concatenate horizontally.
6. Print the result of resampling gdp every decade (i.e., 
   using .resample('10A')) and aggregating with the method 
   .last(). This has been done for you, so hit 'Submit Answer' 
   to see the result!
________________________________________________________
GUIDE:

Resampling & concatenating DataFrames with inner join
In this exercise, you'll compare the historical 10-year 
GDP (Gross Domestic Product) growth in the US and in China. 
The data for the US starts in 1947 and is recorded quarterly; 
by contrast, the data for China starts in 1961 and is recorded 
annually.

You'll need to use a combination of resampling and an inner 
join to align the index labels. You'll need an appropriate 
offset alias for resampling, and the method .resample() must 
be chained with some kind of aggregation method 
(.pct_change() and .last() in this case).

pandas has been imported as pd, and the DataFrames china and 
us have been pre-loaded, with the output of china.head() and 
us.head() printed in the IPython Shell.

	                China
	Year                 
	1961-01-01  49.557050
	1962-01-01  46.685179
	1963-01-01  50.097303
	1964-01-01  59.062255
	1965-01-01  69.709153

	               US
	Year             
	1947-04-01  246.3
	1947-07-01  250.1
	1947-10-01  260.3
	1948-01-01  266.2
	1948-04-01  272.9
________________________________________________________
DATA SOURCE:

https://fred.stlouisfed.org/series/GDP
https://en.wikipedia.org/wiki/Gross_domestic_product
#Time series
http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html
________________________________________________________