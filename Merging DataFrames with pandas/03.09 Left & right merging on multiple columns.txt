import pandas as pd

# Merge revenue and sales: revenue_and_sales
revenue_and_sales = pd.merge(revenue,sales, how="right", on=["city", "state"])

# Print revenue_and_sales
print(revenue_and_sales)

# Merge sales and managers: sales_and_managers
sales_and_managers = pd.merge(sales, managers, how="left", left_on=["city", "state"], right_on=["branch", "state"])

# Print sales_and_managers
print(sales_and_managers)
________________________________________________________
OUT:	
	          city  branch_id state  revenue  units
	0       Austin       10.0    TX    100.0      2
	1       Denver       20.0    CO     83.0      4
	2  Springfield       30.0    IL      4.0      1
	3    Mendocino       47.0    CA    200.0      1
	4  Springfield        NaN    MO      NaN      5

	          city state  units       branch  branch_id   manager
	0    Mendocino    CA      1    Mendocino       47.0     Brett
	1       Denver    CO      4       Denver       20.0      Joel
	2       Austin    TX      2       Austin       10.0  Charlers
	3  Springfield    MO      5  Springfield       31.0     Sally
	4  Springfield    IL      1          NaN        NaN       NaN
________________________________________________________
IPYTHONSHELL:
BEFORE EXECUTE THE EXCERCISE:


AFTER EXECUTE THE EXCERCISE:

________________________________________________________
INSTRUCTION:

1. Execute a right merge using pd.merge() with revenue and 
   sales to yield a new DataFrame revenue_and_sales.
   - Use how='right' and on=['city', 'state'].
2. Print the new DataFrame revenue_and_sales. This has been 
   done for you.
3. Execute a left merge with sales and managers to yield a new 
   DataFrame sales_and_managers.
   - Use how='left', left_on=['city', 'state'], and 
     right_on=['branch', 'state'].
4. Print the new DataFrame sales_and_managers. This has been 
   done for you, so hit 'Submit Answer' to see the result!

________________________________________________________
GUIDE:

Left & right merging on multiple columns

You now have, in addition to the revenue and managers 
DataFrames from prior exercises, a DataFrame sales that 
summarizes units sold from specific branches (identified by 
city and state but not branch_id).

Once again, the managers DataFrame uses the label branch in 
place of city as in the other two DataFrames. Your task here 
is to employ left and right merges to preserve data and identify 
where data is missing.

By merging revenue and sales with a right merge, you can 
identify the missing revenue values. Here, you don't need 
to specify left_on or right_on because the columns to merge 
on have matching labels.

By merging sales and managers with a left merge, you can 
identify the missing manager. Here, the columns to merge on 
have conflicting labels, so you must specify left_on and right_on. 
In both cases, you're looking to figure out how to connect the 
fields in rows containing Springfield.

pandas has been imported as pd and the three DataFrames revenue, 
managers, and sales have been pre-loaded. They have been printed 
for you to explore in the IPython Shell.

	revenue
	          city  branch_id state  revenue
	0       Austin         10    TX      100
	1       Denver         20    CO       83
	2  Springfield         30    IL        4
	3    Mendocino         47    CA      200
	
	managers
	        branch  branch_id state   manager
	0       Austin         10    TX  Charlers
	1       Denver         20    CO      Joel
	2    Mendocino         47    CA     Brett
	3  Springfield         31    MO     Sally

	sales
	          city state  units
	0    Mendocino    CA      1
	1       Denver    CO      4
	2       Austin    TX      2
	3  Springfield    MO      5
	4  Springfield    IL      1
________________________________________________________
