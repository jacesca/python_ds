# Add 'year' column to names_1881 and names_1981
names_1881['year'] = 1881
names_1981['year'] = 1981

# Append names_1981 after names_1881 with ignore_index=True: combined_names
combined_names = names_1881.append(names_1981, ignore_index=True)

# Print shapes of names_1981, names_1881, and combined_names
print(names_1981.shape)
print(names_1881.shape)
print(combined_names.shape)

# Print all rows that contain the name 'Morgan'
#print(combined_names[combined_names.name=='Morgan'])
#print(combined_names.loc[combined_names.name.str.contains('Morgan')])
#print(combined_names.loc[combined_names.name=='Morgan'])
print(combined_names.loc[combined_names["name"]=='Morgan'])
________________________________________________________
OUT:	
	(19455, 4)
	( 1935, 4)
	(21390, 4)

	         name gender  count  year
	1283   Morgan      M     23  1881
	2096   Morgan      F   1769  1981
	14390  Morgan      M    766  1981
________________________________________________________
IPYTHONSHELL:
BEFORE EXECUTE THE EXCERCISE:
In [1]: names_1881.shape
	Out[1]: (1935, 3)

In [2]: names_1981.shape
	Out[2]: (19455, 3)

In [3]: names_1881.head()
	Out[3]: 
	        name gender  count
	0       Mary      F   6919
	1       Anna      F   2698
	2       Emma      F   2034
	3  Elizabeth      F   1852
	4   Margaret      F   1658

In [4]: names_1981.head()
	Out[4]: 
	       name gender  count
	0  Jennifer      F  57032
	1   Jessica      F  42519
	2    Amanda      F  34370
	3     Sarah      F  28162
	4   Melissa      F  28003

AFTER EXECUTE THE EXCERCISE:

________________________________________________________
INSTRUCTION:

1. Create a 'year' column in the DataFrames names_1881 
   and names_1981, with values of 1881 and 1981 
   respectively. Recall that assigning a scalar value 
   to a DataFrame column broadcasts that value throughout.
2. Create a new DataFrame called combined_names by 
   appending the rows of names_1981 underneath the rows 
   of names_1881. Specify the keyword argument 
   ignore_index=True to make a new RangeIndex of unique 
   integers for each row.
3. Print the shapes of all three DataFrames. This has 
   been done for you.
4. Extract all rows from combined_names that have the 
   name 'Morgan'. To do this, use the .loc[] accessor 
   with an appropriate filter. The relevant column of 
   combined_names here is 'name'.
________________________________________________________
GUIDE:

Appending DataFrames with ignore_index
In this exercise, you'll use the Baby Names Dataset 
(from data.gov) again. This time, both DataFrames 
names_1981 and names_1881 are loaded without specifying 
an Index column (so the default Indexes for both are 
RangeIndexes).

You'll use the DataFrame .append() method to make a 
DataFrame combined_names. To distinguish rows from the 
original two DataFrames, you'll add a 'year' column to 
each with the year (1881 or 1981 in this case). In 
addition, you'll specify ignore_index=True so that the 
index values are not used along the concatenation axis. 
The resulting axis will instead be labeled 0, 1, ..., 
n-1, which is useful if you are concatenating objects 
where the concatenation axis does not have meaningful 
indexing information.
________________________________________________________
DATA SOURCE:

https://www.data.gov/developers/baby-names-dataset/
https://www.data.gov/
________________________________________________________
