# Extract the created_at column from df: tweet_time
tweet_time = df["created_at"]

# Extract the clock time: tweet_clock_time
tweet_clock_time = [entry[11:19] for entry in tweet_time]

# Print the extracted times
print(tweet_clock_time)
____________________________________________________________
OUT:
['23:40:17', '23:40:17', '23:40:17', '23:40:17', '23:40:17', 
 '23:40:17', '23:40:18', '23:40:17', '23:40:18', '23:40:18', 
 '23:40:18', '23:40:17', '23:40:18', '23:40:18', '23:40:17', 
 '23:40:18', '23:40:18', '23:40:17', '23:40:18', '23:40:17', 
 '23:40:18', '23:40:18', '23:40:18', '23:40:18', '23:40:17', 
 '23:40:18', '23:40:18', '23:40:17', '23:40:18', '23:40:18', 
 '23:40:18', '23:40:18', '23:40:18', '23:40:18', '23:40:18', 
 '23:40:18', '23:40:18', '23:40:18', '23:40:18', '23:40:18', 
 '23:40:18', '23:40:18', '23:40:18', '23:40:18', '23:40:18', 
 '23:40:18', '23:40:18', '23:40:18', '23:40:18', '23:40:18', 
 '23:40:18', '23:40:18', '23:40:18', '23:40:18', '23:40:18', 
 '23:40:18', '23:40:18', '23:40:18', '23:40:18', '23:40:18', 
 '23:40:19', '23:40:18', '23:40:18', '23:40:18', '23:40:19', 
 '23:40:19', '23:40:19', '23:40:18', '23:40:19', '23:40:19', 
 '23:40:19', '23:40:18', '23:40:19', '23:40:19', '23:40:19', 
 '23:40:18', '23:40:19', '23:40:19', '23:40:19', '23:40:19', 
 '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', 
 '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', 
 '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', 
 '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19']
____________________________________________________________
INSTRUCTION:
1. Extract the column 'created_at' from df and assign the 
   result to tweet_time. Fun fact: the extracted column in 
   tweet_time here is a Series data structure!
2. Create a list comprehension that extracts the time from 
   each row in tweet_time. Each row is a string that 
   represents a timestamp, and you will access the 12th to 
   19th characters in the string to extract the time. Use 
   entry as the iterator variable and assign the result to 
   tweet_clock_time. Remember that Python uses 0-based 
   indexing!
____________________________________________________________
GUIDE:
Build a generator
In previous exercises, you've dealt mainly with writing 
generator expressions, which uses comprehension syntax. 
Being able to use comprehension syntax for generator 
expressions made your work so much easier!

Now, recall from the video that not only are there generator 
expressions, there are generator functions as well. Generator 
functions are functions that, like generator expressions, 
yield a series of values, instead of returning a single value. 
A generator function is defined as you do a regular function, 
but whenever it generates a value, it uses the keyword yield 
instead of return.

In this exercise, you will create a generator function with 
a similar mechanism as the generator expression you defined 
in the previous exercise:
____________________________________________________________
IPYTHONSHELL:
In [1]: df.keys()

Out[1]: 
Index(['contributors', 'coordinates', 'created_at', 
               'entities', 'extended_entities', 'favorite_count', 
               'favorited', 'filter_level', 'geo', 'id', 'id_str', 
               'in_reply_to_screen_name',
 'in_reply_to_status_id', 
               'in_reply_to_status_id_str',
 'in_reply_to_user_id', 
               'in_reply_to_user_id_str', 'is_quote_status', 
               'lang', 'place', 'possibly_sensitive', 
               'quoted_status',
 'quoted_status_id', 
               'quoted_status_id_str', 'retweet_count',
 'retweeted', 
               'retweeted_status', 'source', 'text', 'timestamp_ms',
               'truncated', 'user'],
      
         dtype='object')
____________________________________________________________
