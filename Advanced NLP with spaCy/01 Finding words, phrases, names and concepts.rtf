{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang2058{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset0 Courier New;}{\f2\fnil Courier New;}{\f3\fnil Calibri;}{\f4\fnil\fcharset2 Symbol;}}
{\colortbl ;\red255\green0\blue0;\red0\green77\blue187;\red0\green0\blue255;\red0\green176\blue80;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sl240\slmult1\tx568\cf1\f0\fs22\lang10 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\b\fs32 01. Finding words, phrases, names and concepts\par
\cf0\b0\fs22 This chapter will introduce you to the basics of text processing with spaCy. You'll learn about the data structures, how to work with statistical models, and how to use them to predict linguistic features in your text.\cf1\b\fs20\par

\pard\sl240\slmult1\tx568\b0\fs22 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\cf2\b 01.01 Introduction to spaCy\par

\pard\li720\sl240\slmult1\qj\cf0\b0\fs20\lang10 See the video.\fs22\par

\pard\sl240\slmult1\tx568\cf1 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\cf2\b 01.02 Getting Started\par

\pard\li720\sl240\slmult1\qj\cf0\b0\fs20\lang10 Let's get started and try out spaCy! In this exercise, you'll be able to try out some of the 45+ available languages ({{\field{\*\fldinst{HYPERLINK https://spacy.io/usage/models#languages }}{\fldrslt{https://spacy.io/usage/models#languages\ul0\cf0}}}}\f0\fs20 ).\par
This course introduces a lot of new concepts, so if you ever need a quick refresher, download the spaCy Cheat Sheet ({{\field{\*\fldinst{HYPERLINK http://datacamp-community-prod.s3.amazonaws.com/29aa28bf-570a-4965-8f54-d6a541ae4e06 }}{\fldrslt{http://datacamp-community-prod.s3.amazonaws.com/29aa28bf-570a-4965-8f54-d6a541ae4e06\ul0\cf0}}}}\f0\fs20 ) and keep it handy!\fs22\par
___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b INSTRUCTIONS:\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj\b0\fs20 Import the English class from spacy.lang.en and create the nlp object.\par
{\pntext\f4\'B7\tab}Create a doc and print its text.\par

\pard\sl240\slmult1\qj\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj Import the German class from spacy.lang.de and create the nlp object.\par
{\pntext\f4\'B7\tab}Create a doc and print its text.\par

\pard\sl240\slmult1\qj\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj Import the Spanish class from spacy.lang.es and create the nlp object.\par
{\pntext\f4\'B7\tab}Create a doc and print its text.\par

\pard\li720\sl240\slmult1\qj\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b ANSWER:\par
\b0\f1\fs16 # Import the English language class\par
from spacy.lang.en import English\par
\par
# Create the nlp object\par
nlp = English()\par
\par
# Process a text\par
doc = nlp("This is a sentence.")\par
\par
# Print the document text\par
print(doc.text)\par
\par
\par
\par
# Import the German language class\par
from spacy.lang.de import German\par
\par
# Create the nlp object\par
nlp = German()\par
\par
# Process a text (this is German for: "Kind regards!")\par
doc = nlp("Liebe Gr\'fc\'dfe!")\par
\par
# Print the document text\par
print(doc.text)\par
\par
\par
\par
# Import the Spanish language class\par
from spacy.lang.es import Spanish\par
\par
# Create the nlp object\par
nlp = Spanish()\par
\par
# Process a text (this is Spanish for: "How are you?")\par
doc = nlp("\'bfC\'f3mo est\'e1s?")\par
\par
# Print the document text\par
print(doc.text)\par

\pard\li720\sl240\slmult1\qj\f0\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b RESULT:\par
\b0\f1\fs16 This is a sentence.\par
\par
\par
Liebe Gr\'fc\'dfe!\par
\par
\par
\'bfC\'f3mo est\'e1s?\b\par

\pard\li720\sl240\slmult1\qj\b0\f0\fs22 ___________________________________________________________________________\par
\cf4\i\fs20 Great work!\cf0\i0\f1\fs16\par

\pard\sl240\slmult1\tx568\cf1\f0\fs22 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\cf2\b 01.03 Documents, spans and tokens\par

\pard\li720\sl240\slmult1\qj\cf0\b0\fs20\lang10 When you call nlp on a string, spaCy first tokenizes the text and creates a document object. In this exercise, you'll learn more about the Doc, as well as its views Token and Span.\fs22\par
___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b INSTRUCTIONS:\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj\b0\fs20 Import the English language class and create the nlp object.\par
{\pntext\f4\'B7\tab}Process the text and instantiate a Doc object in the variable doc.\par
{\pntext\f4\'B7\tab}Select the first token of the Doc and print its text.\par

\pard\sl240\slmult1\qj\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj Create a slice of the Doc for the tokens "tree kangaroos" and "tree kangaroos and narwhals".\par

\pard\li720\sl240\slmult1\qj\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b ANSWER:\par
\b0\f1\fs16 # Import the English language class and create the nlp object\par
from spacy.lang.en import English\par
nlp = English()\par
\par
# Process the text\par
doc = nlp("I like tree kangaroos and narwhals.")\par
\par
# Select the first token\par
first_token = doc[0]\par
\par
# Print the first token's text\par
print(first_token.text)\par
\par
\par
\par
# A slice of the Doc for "tree kangaroos"\par
tree_kangaroos = doc[2:4]\par
print(tree_kangaroos.text)\par
\par
# A slice of the Doc for "tree kangaroos and narwhals" (without the ".")\par
tree_kangaroos_and_narwhals = doc[2:6]\par
print(tree_kangaroos_and_narwhals.text)\par

\pard\li720\sl240\slmult1\qj\f0\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b RESULT:\par
\b0\f1\fs16 I\par
\par
\par
tree kangaroos\par
tree kangaroos and narwhals\b\par

\pard\li720\sl240\slmult1\qj\b0\f0\fs22 ___________________________________________________________________________\par
\cf4\i\fs20 Nicely done!\cf0\i0\f1\fs16\par

\pard\sl240\slmult1\tx568\cf1\f0\fs22 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\cf2\b 01.04 Lexical attributes\par

\pard\li720\sl240\slmult1\qj\cf0\b0\fs20\lang10 In this example, you'll use spaCy's Doc and Token objects, and lexical attributes to find percentages in a text. You'll be looking for two subsequent tokens: a number and a percent sign. The English nlp object has already been created.\fs22\par
___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b INSTRUCTIONS:\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj\b0\fs20 Use the like_num token attribute to check whether a token in the doc resembles a number.\par
{\pntext\f4\'B7\tab}Get the token following the current token in the document. The index of the next token in the doc is token.i + 1.\par
{\pntext\f4\'B7\tab}Check whether the next token's text attribute is a percent sign "%".\par

\pard\li720\sl240\slmult1\qj\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b ANSWER:\par
\b0\f1\fs16 # Process the text\par
doc = nlp("In 1990, more than 60% of people in East Asia were in extreme poverty. Now less than 4% are.")\par
\par
# Iterate over the tokens in the doc\par
for token in doc:\par
    # Check if the token resembles a number\par
    if token.like_num:\par
        # Get the next token in the document\par
        next_token = doc[token.i+1]\par
        # Check if the next token's text equals '%'\par
        if next_token.text == '%':\par
            print('Percentage found:', token.text)\par
            \par
porcentage_found = [token.text+'%' for token in doc if token.like_num and doc[token.i+1].text=='%']\par
print('Percentage found:', porcentage_found)\par

\pard\li720\sl240\slmult1\qj\f0\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b RESULT:\par
\b0\f1\fs16 Percentage found: 60\par
Percentage found: 4\par
\par
Percentage found: ['60%', '4%']\b\par

\pard\li720\sl240\slmult1\qj\b0\f0\fs22 ___________________________________________________________________________\par
\cf4\i\fs20 Well done! As you can see, you can do a lot of very powerful analyses using the tokens and their attributes.\cf0\i0\f1\fs16\par

\pard\sl240\slmult1\tx568\cf1\f0\fs22 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\cf2\b 01.05 Statistical models\par

\pard\li720\sl240\slmult1\qj\cf0\b0\fs20\lang10 See the video.\fs22\par

\pard\sl240\slmult1\tx568\cf1 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\cf2\b 01.06 Model packages\par

\pard\li720\sl240\slmult1\cf0\lang10 INSTRUCTIONS:\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj\b0\fs20 What's not included in a model package that you can load into spaCy?\par

\pard\li720\sl240\slmult1\qj\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b ANSWER:\par

\pard\li1440\sl240\slmult1\f1\fs20 POSIBLLE ANSWERS\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li2160\sl240\slmult1\qj\b0\f0 A meta file including the language, pipeline and license.\par
{\pntext\f4\'B7\tab}Binary weights to make statistical predictions.\par
{\pntext\f4\'B7\tab}\cf1 The labelled data that the model was trained on.\par
{\pntext\f4\'B7\tab}\cf0 Strings of the model's vocabulary and their hashes.\par

\pard\li1440\sl240\slmult1\b\f1 CORRECT ANSWER\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li2160\sl240\slmult1\qj\cf1\b0\f0 The labelled data that the model was trained on.\par

\pard\li720\sl240\slmult1\qj\cf0\fs22 ___________________________________________________________________________\par
\cf4\i\fs20 [That's correct! Statistical models allow you to generalize based on a set of training examples. Once they're trained, they use binary weights to make predictions. That's why it's not necessary to ship them with their training data.]\cf0\i0\f1\fs16\par

\pard\sl240\slmult1\tx568\cf1\f0\fs22 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\cf2\b 01.07 Loading models\par

\pard\li720\sl240\slmult1\qj\cf0\b0\fs20\lang10 Let's start by loading a model. spacy is already imported.\fs22\par
___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b INSTRUCTIONS:\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj\b0\fs20 Use spacy.load to load the small English model 'en_core_web_sm'.\par
{\pntext\f4\'B7\tab}Process the text and print the document text.\par

\pard\sl240\slmult1\qj\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj Use spacy.load to load the small German model 'de_core_news_sm'.\par
{\pntext\f4\'B7\tab}Process the text and print the document text.\par

\pard\li720\sl240\slmult1\qj\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b ANSWER:\par
\b0\f1\fs16 # Load the 'en_core_web_sm' model \f2\endash  spaCy is already imported\par
nlp = spacy.load('en_core_web_sm')\par
\par
text = "It\rquote s official: Apple is the first U.S. public company to reach a $1 trillion market value"\par
\par
# Process the text\par
doc = nlp(text)\par
\par
# Print the document text\par
print(doc.text)\f1\par
\par
# Load the 'de_core_news_sm' model \f2\endash  spaCy is already imported\par
nlp = spacy.load('de_core_news_sm')\par
\par
text = "Als erstes Unternehmen der B\f1\'f6rsengeschichte hat Apple einen Marktwert von einer Billion US-Dollar erreicht"\par
\par
# Process the text\par
doc = nlp(text)\par
\par
# Print the document text\par
print(doc.text)\par

\pard\li720\sl240\slmult1\qj\f0\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b RESULT:\par
\b0\f1\fs16 It\rquote s official: Apple is the first U.S. public company to reach a $1 trillion market value\par
\par
Als erstes Unternehmen der B\'f6rsengeschichte hat Apple einen Marktwert von einer Billion US-Dollar erreicht\b\par

\pard\li720\sl240\slmult1\qj\b0\f0\fs22 ___________________________________________________________________________\par
\cf4\i\fs20 Well done! Now that you've practiced loading models, let's look at some of their predictions.\cf0\i0\f1\fs16\par

\pard\sl240\slmult1\tx568\cf1\f0\fs22 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\cf2\b 01.08 Predicting linguistic annotations\par

\pard\li720\sl240\slmult1\qj\cf0\b0\fs20\lang10 You'll now get to try one of spaCy's pre-trained model packages and see its predictions in action. Feel free to try it out on your own text! The small English model is already available as the variable nlp.\par
To find out what a tag or label means, you can call spacy.explain in the IPython shell. For example: spacy.explain('PROPN') or spacy.explain('GPE').\fs22\par
___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b INSTRUCTIONS:\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj\b0\fs20 Process the text with the nlp object and create a doc.\par
{\pntext\f4\'B7\tab}For each token, print the token text, the token's .pos_ (part-of-speech tag) and the token's .dep_ (dependency label).\par

\pard\sl240\slmult1\qj\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj Process the text and create a doc object.\par
{\pntext\f4\'B7\tab}Iterate over the doc.ents and print the entity text and label_ attribute.\par

\pard\li720\sl240\slmult1\qj\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b ANSWER:\par
\b0\f1\fs16 text = "It\rquote s official: Apple is the first U.S. public company to reach a $1 trillion market value"\par
\par
# Process the text\par
doc = nlp(text)\par
\par
for token in doc:\par
    # Get the token text, part-of-speech tag and dependency label\par
    token_text = token.text\par
    token_pos = token.pos_\par
    token_dep = token.dep_\par
    # This is for formatting only\par
    print('\{:<12\}\{:<10\}\{:<10\}'.format(token_text, token_pos, token_dep))\par
\par
\par
\par
text = "It\rquote s official: Apple is the first U.S. public company to reach a $1 trillion market value"\par
\par
# Process the text\par
doc = nlp(text)\par
\par
# Iterate over the predicted entities\par
for ent in doc.ents:\par
    # print the entity text and its label\par
    print('\{:<12\}\{\}'.format(ent.text, ent.label_))\par

\pard\li720\sl240\slmult1\qj\f0\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b RESULT:\par
\b0\f1\fs16 It          PRON      nsubj     \par
\rquote s          PROPN     ROOT      \par
official    NOUN      acomp     \par
:           PUNCT     punct     \par
Apple       PROPN     nsubj     \par
is          VERB      ROOT      \par
the         DET       det       \par
first       ADJ       amod      \par
U.S.        PROPN     nmod      \par
public      ADJ       amod      \par
company     NOUN      attr      \par
to          PART      aux       \par
reach       VERB      relcl     \par
a           DET       det       \par
$           SYM       quantmod  \par
1           NUM       compound  \par
trillion    NUM       nummod    \par
market      NOUN      compound  \par
value       NOUN      dobj\par
\par
\par
Apple       ORG\par
first       ORDINAL\par
U.S.        GPE\par
$1 trillion MONEY\b\par

\pard\li720\sl240\slmult1\qj\b0\f0\fs22 ___________________________________________________________________________\par
\cf4\i\fs20 Great work! So far, the model has been correct every single time. In the next exercise, you'll see what happens if the model is wrong, and how to adjust it.\cf0\i0\f1\fs16\par

\pard\sl240\slmult1\tx568\cf1\f0\fs22 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\cf2\b 01.09 Predicting named entities in context\par

\pard\li720\sl240\slmult1\qj\cf0\b0\fs20\lang10 Models are statistical and not always right. Whether their predictions are correct depends on the training data and the text you're processing. Let's take a look at an example. The small English model is available as the variable nlp.\fs22\par
___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b INSTRUCTIONS:\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj\b0\fs20 Process the text with the nlp object.\par
{\pntext\f4\'B7\tab}Iterate over the entities with the iterator ent and print the entity text and label.\par

\pard\li720\sl240\slmult1\qj\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b ANSWER:\par
\b0\f1\fs16 text = "New iPhone X release date leaked as Apple reveals pre-orders by mistake"\par
\par
# Process the text\par
doc = nlp(text)\par
\par
# Iterate over the entities\par
for ent in doc.ents:\par
    # print the entity text and label\par
    print(ent.text, ent.label_)\par
\par
\par
\par
# Get the span for "iPhone X"\par
iphone_x = doc[1:3]\par
\par
# Print the span text\par
print('Missing entity:', iphone_x.text)\par

\pard\li720\sl240\slmult1\qj\f0\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b RESULT:\par
\b0\f1\fs16 Apple ORG\par
Missing entity: iPhone X\b\par

\pard\li720\sl240\slmult1\qj\b0\f0\fs22 ___________________________________________________________________________\par
\cf4\i\fs20 Perfect! Of course, you don't always have to do this manually. In the next video, you'll learn about spaCy's rule-based matcher, which can help you find certain words and phrases in text.\cf0\i0\f1\fs16\par

\pard\sl240\slmult1\tx568\cf1\f0\fs22 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\cf2\b 01.10 Rule-based matching\par

\pard\li720\sl240\slmult1\qj\cf0\b0\fs20\lang10 See the video.\fs22\par

\pard\sl240\slmult1\tx568\cf1 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\cf2\b 01.11 Using the Matcher\par

\pard\li720\sl240\slmult1\qj\cf0\b0\fs20\lang10 Let's try spaCy's rule-based Matcher. You'll be using the example from the previous exercise and write a pattern that can match the phrase "iPhone X" in the text. The nlp object and a processed doc are already available.\par
Already done:\par

\pard\li720\sl240\slmult1\f1\fs16 doc = npl("New iPhone X release date leaked as Apple reveals pre-orders by mistake")\par

\pard\li720\sl240\slmult1\qj\f0\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b INSTRUCTIONS:\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj\b0\fs20 Import the Matcher from spacy.matcher.\par
{\pntext\f4\'B7\tab}Initialize it with the nlp object's shared vocab.\par

\pard\sl240\slmult1\qj\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj Create a pattern that matches the 'TEXT' values of two tokens: "iPhone" and "X".\par
{\pntext\f4\'B7\tab}Use the matcher.add method to add the pattern to the matcher.\par

\pard\sl240\slmult1\qj\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj Call the matcher on the doc and store the result in the variable matches.\par
{\pntext\f4\'B7\tab}Iterate over the matches and get the matched span from the start to the end index.\par

\pard\li720\sl240\slmult1\qj\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b ANSWER:\par
\b0\f1\fs16 # Import the Matcher\par
from spacy.matcher import Matcher\par
\par
# Initialize the Matcher with the shared vocabulary\par
matcher = Matcher(nlp.vocab)\par
\par
\par
# Create a pattern matching two tokens: "iPhone" and "X"\par
pattern = [\{'TEXT': 'iPhone'\}, \{'TEXT': 'X'\}]\par
\par
# Add the pattern to the matcher\par
matcher.add('IPHONE_X_PATTERN', None, pattern)\par
\par
\par
# Use the matcher on the doc\par
matches = matcher(doc)\par
print('Matches:', [doc[start:end].text for match_id, start, end in matches])\par

\pard\li720\sl240\slmult1\qj\f0\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b RESULT:\par
\b0\f1\fs16 Matches: ['iPhone X']\b\par

\pard\li720\sl240\slmult1\qj\b0\f0\fs22 ___________________________________________________________________________\par
\cf4\i\fs20 Well done! You successfully found one match: the tokens at doc[1:3] describing the span for "iPhone X".\cf0\i0\f1\fs16\par

\pard\sl240\slmult1\tx568\cf1\f0\fs22 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\cf2\b 01.12 Writing match patterns\lang10\par

\pard\li720\sl240\slmult1\qj\cf0\b0\fs20 In this exercise, you'll practice writing more complex match patterns using different token attributes and operators. A matcher is already initialized and available as the variable matcher.\fs22\par
___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b INSTRUCTIONS:\par

\pard{\pntext\f4\'B7\tab}{\*\pn\pnlvlblt\pnf4\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sl240\slmult1\qj\b0\fs20 Write one pattern that only matches mentions of the full iOS versions: "iOS 7", "iOS 11" and "iOS 10".\par
{\pntext\f4\'B7\tab}Write one pattern that only matches forms of "download" (tokens with the lemma "download"), followed by a token with the part-of-speech tag 'PROPN' (proper noun).\par
{\pntext\f4\'B7\tab}Write one pattern that matches adjectives ('ADJ') followed by one or two 'NOUN's (one noun and one optional noun).\par

\pard\li720\sl240\slmult1\qj\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b ANSWER:\par
\b0\f1\fs16 doc = nlp("After making the iOS update you won't notice a radical system-wide redesign: nothing like the aesthetic upheaval we got with iOS 7. Most of iOS 11's furniture remains the same as in iOS 10. But you will discover some tweaks once you delve a little deeper.")\par
\par
# Write a pattern for full iOS versions ("iOS 7", "iOS 11", "iOS 10")\par
pattern = [\{'TEXT': "iOS"\}, \{'IS_DIGIT': True\}]\par
\par
# Add the pattern to the matcher and apply the matcher to the doc\par
matcher.add('IOS_VERSION_PATTERN', None, pattern)\par
matches = matcher(doc)\par
print('Total matches found:', len(matches))\par
\par
# Iterate over the matches and print the span text\par
for match_id, start, end in matches:\par
    print('Match found:', doc[start:end].text)\par
\par
\par
\par
\par
doc = nlp("i downloaded Fortnite on my laptop and can't open the game at all. Help? so when I was downloading Minecraft, I got the Windows version where it is the '.zip' folder and I used the default program to unpack it... do I also need to download Winzip?")\par
\par
# Write a pattern that matches a form of "download" plus proper noun\par
pattern = [\{'LEMMA': 'download'\}, \{'POS': 'PROPN'\}]\par
\par
# Add the pattern to the matcher and apply the matcher to the doc\par
matcher.add('DOWNLOAD_THINGS_PATTERN', None, pattern)\par
matches = matcher(doc)\par
print('Total matches found:', len(matches))\par
\par
# Iterate over the matches and print the span text\par
for match_id, start, end in matches:\par
    print('Match found:', doc[start:end].text)\par
\par
\par
\par
doc = nlp("Features of the app include a beautiful design, smart search, automatic labels and optional voice responses.")\par
\par
# Write a pattern for adjective plus one or two nouns\par
pattern = [\{'POS': 'ADJ'\}, \{'POS': 'NOUN'\}, \{'POS': 'NOUN', 'OP': '?'\}]\par
\par
# Add the pattern to the matcher and apply the matcher to the doc\par
matcher.add('ADJ_NOUN_PATTERN', None, pattern)\par
matches = matcher(doc)\par
print('Total matches found:', len(matches))\par
\par
# Iterate over the matches and print the span text\par
for match_id, start, end in matches:\par
    print('Match found:', doc[start:end].text)\par

\pard\li720\sl240\slmult1\qj\f0\fs22 ___________________________________________________________________________\par

\pard\li720\sl240\slmult1\b RESULT:\par
\b0\f1\fs16 Total matches found: 3\par
Match found: iOS 7\par
Match found: iOS 11\par
Match found: iOS 10\par
\par
\par
Total matches found: 3\par
Match found: downloaded Fortnite\par
Match found: downloading Minecraft\par
Match found: download Winzip\par
\par
\par
Total matches found: 4\par
Match found: beautiful design\par
Match found: smart search\par
Match found: automatic labels\par
Match found: optional voice responses\b\par

\pard\li720\sl240\slmult1\qj\b0\f0\fs22 ___________________________________________________________________________\par
\cf4\i\fs20 Great work \f3\endash  those were some pretty complex patterns! Let's move on to the next chapter and take a look at how to use spaCy for more advanced text analysis.\cf0\i0\f1\fs16\par

\pard\sl240\slmult1\tx568\cf1\f0\fs22 __________________________________________________________________________________\par

\pard\sl240\slmult1\qj\b Source:\par

\pard\sl240\slmult1 {\cf0\b0{\field{\*\fldinst{HYPERLINK https://learn.datacamp.com/courses/advanced-nlp-with-spacy }}{\fldrslt{https://learn.datacamp.com/courses/advanced-nlp-with-spacy\ul0\cf0}}}}\cf0\b0\f0\fs22\lang2058\par

\pard\sl240\slmult1\tx568\cf1\lang10 __________________________________________________________________________________\par
\cf0\b\par
}
 