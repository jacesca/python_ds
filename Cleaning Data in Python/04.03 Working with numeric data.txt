# Convert 'total_bill' to a numeric dtype
#tips['total_bill'] = pd.to_numeric(tips.total_bill, errors="coerce")
tips['total_bill'] = pd.to_numeric(tips["total_bill"], errors="coerce")

# Convert 'tip' to a numeric dtype
tips['tip'] = pd.to_numeric(tips.tip, errors="coerce")

# Print the info of tips
print(tips.info())
________________________________________________________
OUT:
	<class 'pandas.core.frame.DataFrame'>
	RangeIndex: 244 entries, 0 to 243
	Data columns (total 7 columns):
	total_bill    202 non-null float64
	tip           220 non-null float64
	sex           234 non-null category
	smoker        229 non-null category
	day           243 non-null category
	time          227 non-null category
	size          231 non-null float64
	dtypes: category(4), float64(3)
	memory usage: 7.2 KB
	None
________________________________________________________
IPYTHONSHELL:

In [1]: tips.shape
	Out[1]: (244, 7)

In [2]: tips.info()
	<class 'pandas.core.frame.DataFrame'>
	RangeIndex: 244 entries, 0 to 243
	Data columns (total 7 columns):
	total_bill    244 non-null object
	tip           244 non-null object
	sex           234 non-null category
	smoker        229 non-null category
	day           243 non-null category
	time          227 non-null category
	size          231 non-null float64
	dtypes: category(4), float64(1), object(2)
	memory usage: 7.2+ KB

In [3]: total_bill_review = tips.total_bill.value_counts(dropna=False)

In [4]: total_bill_review.shape
	Out[7]: (191,)

In [5]: total_bill_review.index
	Out[5]: Index(['missing', 13.0, 20.69, 15.98, 21.01, 
                        15.69, 13.42, 10.34, 20.29, 7.25,
		        ...
           		16.04, 24.59, 13.51, 17.78, 9.68, 45.35,     
                        16.29, 12.26, 35.83, 10.09],
      dtype='object', length=191)

In [6]: total_bill_review.keys()
	Out[6]: Index(['missing', 13.0, 20.69, 15.98, 21.01, 
                        15.69, 13.42, 10.34, 20.29, 7.25,
		        ...
           		16.04, 24.59, 13.51, 17.78, 9.68, 45.35,     
                        16.29, 12.26, 35.83, 10.09],
      dtype='object', length=191)

In [7]: total_bill_review.head()
	Out[7]: 
	missing    42
	13.42       3
	15.69       2
	15.98       2
	17.92       2
	Name: total_bill, dtype: int64

In [8]: [x for x in total_bill_review.keys() if type(x)==str]
	Out[8]: ['missing']

In [9]: tips[tips["total_bill"]=="missing"].head()
	Out[9]: 
	   total_bill      tip     sex smoker  day    time  size
	3     missing     3.31    Male     No  Sun  Dinner   2.0
	15    missing  missing    Male     No  Sun  Dinner   2.0
	19    missing     3.35    Male     No  Sat  Dinner   3.0
	20    missing     4.08    Male     No  Sat  Dinner   2.0
	22    missing     2.23  Female     No  Sat  Dinner   2.0

In [10]: tips[tips["total_bill"]=="missing"].shape

	Out[10]: (42, 7)

In [11]: [x for x in tips.tip.value_counts(dropna=False).keys() if type(x)==str]
	Out[11]: ['missing']

In [12]: tips[tips["tip"]=="missing"].head()
	Out[12]: 
	   total_bill      tip     sex smoker  day    time  size
	13    missing  missing    Male     No  Sun  Dinner   4.0
	14      14.83  missing  Female     No  Sun  Dinner   2.0
	26      13.37  missing    Male     No  Sat  Dinner   2.0
	27      12.69  missing    Male     No  Sat  Dinner   2.0
	34    missing  missing    Male     No  Sat  Dinner   2.0

In [13]: tips[tips["tip"]=="missing"].shape
Out[13]: (24, 7)
________________________________________________________
INSTRUCTION:
1. Use pd.to_numeric() to convert the 'total_bill' 
   column of tips to a numeric data type. Coerce 
   the errors to NaN by specifying the keyword 
   argument errors='coerce'.
2. Convert the 'tip' column of 'tips' to a numeric 
   data type exactly as you did for the 'total_bill' 
   column.
3. Print the info of tips to confirm that the data 
   types of 'total_bill' and 'tips' are numeric.
________________________________________________________
GUIDE:
Working with numeric data
If you expect the data type of a column to be numeric 
(int or float), but instead it is of type object, this 
typically means that there is a non numeric value in 
the column, which also signifies bad data.

You can use the pd.to_numeric() function to convert a 
column into a numeric data type. If the function raises 
an error, you can be sure that there is a bad value 
within the column. You can either use the techniques 
you learned in Chapter 1 to do some exploratory data 
analysis and find the bad value, or you can choose to 
ignore or coerce the value into a missing value, NaN.

A modified version of the tips dataset has been 
pre-loaded into a DataFrame called tips. For 
instructional purposes, it has been pre-processed 
to introduce some 'bad' data for you to clean. 
Use the .info() method to explore this. You'll 
note that the total_bill and tip columns, which 
should be numeric, are instead of type object. 
Your job is to fix this.
________________________________________________________
