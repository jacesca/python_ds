# Melt tb: tb_melt
tb_melt = pd.melt(frame=tb, id_vars=["country", "year"])
print(tb_melt.info())

# Create the 'gender' column
tb_melt['gender'] = tb_melt.variable.str[0]

# Create the 'age_group' column
tb_melt['age_group'] = tb_melt.variable.str[1:] #substring

# Print the head of tb_melt
print(tb_melt.head())

print(tb_melt.describe())
print(tb_melt.info())
print(tb_melt.keys()) #same .keys() = .columns
print(tb_melt.columns)
________________________________________________________
OUT:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 3216 entries, 0 to 3215
Data columns (total 4 columns):
country     3200 non-null object
year        3216 non-null int64
variable    3216 non-null object
value       2273 non-null float64
dtypes: float64(1), int64(1), object(2)
memory usage: 100.6+ KB
None


  country  year variable  value gender age_group
0      AD  2000     m014    0.0      m       014
1      AE  2000     m014    2.0      m       014
2      AF  2000     m014   52.0      m       014
3      AG  2000     m014    0.0      m       014
4      AL  2000     m014    2.0      m       014


         year         value
count  3216.0   2273.000000
mean   2000.0    504.979762
std       0.0   2072.562447
min    2000.0      0.000000
25%    2000.0      6.000000
50%    2000.0     38.000000
75%    2000.0    258.000000
max    2000.0  31090.000000


<class 'pandas.core.frame.DataFrame'>
RangeIndex: 3216 entries, 0 to 3215
Data columns (total 6 columns):
country      3200 non-null object
year         3216 non-null int64
variable     3216 non-null object
value        2273 non-null float64
gender       3216 non-null object
age_group    3216 non-null object
dtypes: float64(1), int64(1), object(4)
memory usage: 150.8+ KB
None


Index(['country', 'year', 'variable', 'value', 'gender', 'age_group'], dtype='object')


Index(['country', 'year', 'variable', 'value', 'gender', 'age_group'], dtype='object')
________________________________________________________
IPYTHONSHELL:
In [1]: tb.describe()
Out[1]: 
         year         m014         m1524         m2534         m3544 ...          f3544        f4554        f5564         f65   fu
count   201.0   162.000000    163.000000    164.000000    164.000000 ...     160.000000   161.000000   162.000000   160.00000  0.0
mean   2000.0    76.462963    707.030675   1054.262195    952.853659 ...     466.918750   309.459627   208.024691   211.39375  NaN
std       0.0   239.855913   2390.096784   3575.271431   3338.747797 ...    1474.724419  1056.555264   733.412334   713.19440  NaN
min    2000.0     0.000000      0.000000      0.000000      0.000000 ...       0.000000     0.000000     0.000000     0.00000  NaN
25%    2000.0     0.250000      8.000000     11.000000     14.750000 ...       7.750000     5.000000     4.000000     5.00000  NaN
50%    2000.0     5.000000     87.000000    126.000000    119.000000 ...      48.500000    31.000000    23.000000    28.50000  NaN
75%    2000.0    31.500000    508.000000    730.250000    599.500000 ...     312.250000   213.000000   112.000000   111.00000  NaN
max    2000.0  1894.000000  20963.000000  31090.000000  30829.000000 ...   12377.000000  9899.000000  7102.000000  6296.00000  NaN
[8 rows x 17 columns]

In [2]: tb.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 201 entries, 0 to 200
Data columns (total 18 columns):
country    200 non-null object
year       201 non-null int64
m014       162 non-null float64
m1524      163 non-null float64
m2534      164 non-null float64
m3544      164 non-null float64
m4554      165 non-null float64
m5564      166 non-null float64
m65        164 non-null float64
mu         0 non-null float64
f014       160 non-null float64
f1524      160 non-null float64
f2534      162 non-null float64
f3544      160 non-null float64
f4554      161 non-null float64
f5564      162 non-null float64
f65        160 non-null float64
fu         0 non-null float64
dtypes: float64(16), int64(1), object(1)
memory usage: 28.3+ KB


In [3]: tb.keys()
Out[3]: Index(['country', 'year', 'm014', 'm1524', 'm2534', 
               'm3544', 'm4554', 'm5564', 'm65', 'mu', 
               'f014', 'f1524', 'f2534', 'f3544', 'f4554', 
               'f5564', 'f65', 'fu'], 
           dtype='object')


In [4]: tb.columns
Out[4]: Index(['country', 'year', 'm014', 'm1524', 'm2534', 
               'm3544', 'm4554', 'm5564', 'm65', 'mu', 'f014', 
               'f1524', 'f2534', 'f3544', 'f4554', 'f5564', 
               'f65', 'fu'], 
           dtype='object')


In [5]: tb.head()
Out[5]: 
  country  year  m014  m1524  m2534 ...  f3544  f4554  f5564   f65  fu
0      AD  2000   0.0    0.0    1.0 ...    NaN    NaN    NaN   NaN NaN
1      AE  2000   2.0    4.0    4.0 ...    3.0    0.0    0.0   4.0 NaN
2      AF  2000  52.0  228.0  183.0 ...  339.0  205.0   99.0  36.0 NaN
3      AG  2000   0.0    0.0    0.0 ...    0.0    0.0    0.0   0.0 NaN
4      AL  2000   2.0   19.0   21.0 ...    8.0    8.0    5.0  11.0 NaN
[5 rows x 18 columns]
________________________________________________________
INSTRUCTION:
1. Melt tb keeping 'country' and 'year' fixed.
2. Create a 'gender' column by slicing the first letter 
   of the variable column of tb_melt.
3. Create an 'age_group' column by slicing the rest of 
   the variable column of tb_melt.
4. Print the head of tb_melt. This has been done for 
   you, so hit 'Submit Answer' to see the results!
________________________________________________________
GUIDE:
Splitting a column with .str
The dataset you saw in the video, consisting of case 
counts of tuberculosis by country, year, gender, and 
age group, has been pre-loaded into a DataFrame as tb.

In this exercise, you're going to tidy the 'm014' 
column, which represents males aged 0-14 years of age. 
In order to parse this value, you need to extract the 
first letter into a new column for gender, and the rest 
into a column for age_group. Here, since you can parse 
values by position, you can take advantage of pandas' 
vectorized string slicing by using the str attribute 
of columns of type object.

Begin by printing the columns of tb in the IPython 
Shell using its .columns attribute, and take note of 
the problematic column.
________________________________________________________
