# Melt ebola: ebola_melt
ebola_melt = pd.melt(ebola, id_vars=["Date", "Day"], var_name="type_country", value_name="counts")
print(ebola_melt.head())

# Create the 'str_split' column
ebola_melt['str_split'] = ebola_melt.type_country.str.split("_")
print(ebola_melt['str_split'].head())
print(ebola_melt['str_split'][1][0])

# Create the 'type' column, Accede una lista en un dataframe
ebola_melt['type'] = ebola_melt["str_split"].str.get(0)
print(ebola_melt["type"].head())

# Create the 'country' column
ebola_melt['country'] = ebola_melt["str_split"].str.get(1)
print(ebola_melt["country"].head())

# Print the head of ebola_melt
print(ebola_melt.head())
________________________________________________________
OUT:
         Date  Day  type_country  counts
0    1/5/2015  289  Cases_Guinea  2776.0
1    1/4/2015  288  Cases_Guinea  2775.0
2    1/3/2015  287  Cases_Guinea  2769.0
3    1/2/2015  286  Cases_Guinea     NaN
4  12/31/2014  284  Cases_Guinea  2730.0


0    [Cases, Guinea]
1    [Cases, Guinea]
2    [Cases, Guinea]
3    [Cases, Guinea]
4    [Cases, Guinea]
Name: str_split, dtype: object


Cases


0    Cases
1    Cases
2    Cases
3    Cases
4    Cases
Name: type, dtype: object


0    Guinea
1    Guinea
2    Guinea
3    Guinea
4    Guinea
Name: country, dtype: object


         Date  Day  type_country  counts        str_split   type country
0    1/5/2015  289  Cases_Guinea  2776.0  [Cases, Guinea]  Cases  Guinea
1    1/4/2015  288  Cases_Guinea  2775.0  [Cases, Guinea]  Cases  Guinea
2    1/3/2015  287  Cases_Guinea  2769.0  [Cases, Guinea]  Cases  Guinea
3    1/2/2015  286  Cases_Guinea     NaN  [Cases, Guinea]  Cases  Guinea
4  12/31/2014  284  Cases_Guinea  2730.0  [Cases, Guinea]  Cases  Guinea
________________________________________________________
IPYTHONSHELL:
In [1]: ebola.head()
Out[1]: 
         Date  Day  Cases_Guinea  Cases_Liberia  Cases_SierraLeone     ...       Deaths_Nigeria  Deaths_Senegal  Deaths_UnitedStates  Deaths_Spain  Deaths_Mali
0    1/5/2015  289        2776.0            NaN            10030.0     ...                  NaN             NaN                  NaN           NaN          NaN
1    1/4/2015  288        2775.0            NaN             9780.0     ...                  NaN             NaN                  NaN           NaN          NaN
2    1/3/2015  287        2769.0         8166.0             9722.0     ...                  NaN             NaN                  NaN           NaN          NaN
3    1/2/2015  286           NaN         8157.0                NaN     ...                  NaN             NaN                  NaN           NaN          NaN
4  12/31/2014  284        2730.0         8115.0             9633.0     ...                  NaN             NaN                  NaN           NaN          NaN

[5 rows x 18 columns]


In [2]: ebola.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 122 entries, 0 to 121
Data columns (total 18 columns):
Date                   122 non-null object
Day                    122 non-null int64
Cases_Guinea           93 non-null float64
Cases_Liberia          83 non-null float64
Cases_SierraLeone      87 non-null float64
Cases_Nigeria          38 non-null float64
Cases_Senegal          25 non-null float64
Cases_UnitedStates     18 non-null float64
Cases_Spain            16 non-null float64
Cases_Mali             12 non-null float64
Deaths_Guinea          92 non-null float64
Deaths_Liberia         81 non-null float64
Deaths_SierraLeone     87 non-null float64
Deaths_Nigeria         38 non-null float64
Deaths_Senegal         22 non-null float64
Deaths_UnitedStates    18 non-null float64
Deaths_Spain           16 non-null float64
Deaths_Mali            12 non-null float64
dtypes: float64(16), int64(1), object(1)
memory usage: 17.2+ KB

In [3]: ebola.columns
Out[3]: 
Index(['Date', 'Day', 'Cases_Guinea', 'Cases_Liberia', 
       'Cases_SierraLeone', 'Cases_Nigeria', 
       'Cases_Senegal', 'Cases_UnitedStates', 
       'Cases_Spain', 'Cases_Mali', 'Deaths_Guinea', 
       'Deaths_Liberia', 'Deaths_SierraLeone', 
       'Deaths_Nigeria', 'Deaths_Senegal', 
       'Deaths_UnitedStates', 'Deaths_Spain', 
       'Deaths_Mali'],
      dtype='object')
________________________________________________________
INSTRUCTION:
1. Melt ebola using 'Date' and 'Day' as the id_vars, 
   'type_country' as the var_name, and 'counts' as the 
   value_name.
2. Create a column called 'str_split' by splitting the 
   'type_country' column of ebola_melt on '_'. Note 
   that you will first have to access the str attribute 
   of type_country before you can use .split().
3. Create a column called 'type' by using the .get() 
   method to retrieve index 0 of the 'str_split' column 
   of ebola_melt.
4. Create a column called 'country' by using the .get() 
   method to retrieve index 1 of the 'str_split' column 
   of ebola_melt.
5. Print the head of ebola. This has been done for you, 
   so hit 'Submit Answer' to view the results!
________________________________________________________
GUIDE:
Splitting a column with .split() and .get()

Another common way multiple variables are stored in 
columns is with a delimiter. You'll learn how to deal 
with such cases in this exercise, using a dataset 
consisting of Ebola cases and death counts by state 
and country. It has been pre-loaded into a DataFrame 
as ebola.

Print the columns of ebola in the IPython Shell using 
ebola.columns. Notice that the data has column names 
such as Cases_Guinea and Deaths_Guinea. Here, the 
underscore _ serves as a delimiter between the first 
part (cases or deaths), and the second part (country).

This time, you cannot directly slice the variable by 
position as in the previous exercise. You now need to 
use Python's built-in string method called .split(). 
By default, this method will split a string into parts 
separated by a space. However, in this case you want 
it to split by an underscore. You can do this on 
Cases_Guinea, for example, using Cases_Guinea.split('_'), 
which returns the list ['Cases', 'Guinea'].

The next challenge is to extract the first element of 
this list and assign it to a type variable, and the 
second element of the list to a country variable. 
You can accomplish this by accessing the str attribute 
of the column and using the .get() method to retrieve 
the 0 or 1 index, depending on the part you want.
________________________________________________________
