################################################################
##                                                            ##
## Utilizando el metodo apply sobre el DataFrame              ##
##                                                            ##
################################################################
import numpy as np

# Define recode_gender()
def recode_gender(row,gender):

    # Return 0 if gender is 'Female'
    if row[gender] == "Female":
        return 0
    
    # Return 1 if gender is 'Male'    
    elif row[gender] == "Male":
        return 1
    
    # Return np.nan    
    else:
        return np.nan

# Apply the function to the sex column
tips['recode'] = tips.apply(recode_gender,axis=1,gender="sex")

# Print the first five rows of tips
print(tips.head())

print(tips.recode.value_counts(dropna=False))
print(tips[pd.Series.isnull(tips["recode"])].head())
________________________________________________________
################################################################
##                                                            ##
## Utilizando el metodo apply sobre una de las columnas       ##
## (series) en lugar de todo el DataFrame                     ##
##                                                            ##
################################################################
# Define recode_gender()
def recode_gender(gender):

    # Return 0 if gender is 'Female'
    if gender == "Female":
        return 0
    
    # Return 1 if gender is 'Male'    
    elif gender == "Male":
        return 1
    
    # Return np.nan    
    else:
        return np.nan

# Apply the function to the sex column
tips['recode'] = tips.sex.apply(recode_gender)

# Print the first five rows of tips
print(tips.head())

print(tips.recode.value_counts(dropna=False))
print(tips[pd.Series.isnull(tips["recode"])].head())
________________________________________________________
OUT:
   total_bill   tip     sex smoker  day    time  size  recode
0       16.99  1.01  Female     No  Sun  Dinner   2.0     0.0
1       10.34  1.66    Male     No  Sun  Dinner   3.0     1.0
2         NaN  3.50    Male     No  Sun  Dinner   3.0     1.0
3         NaN  3.31    Male     No  Sun  Dinner   2.0     1.0
4       24.59  3.61  Female     No  Sun  Dinner   4.0     0.0


 1.0    152
 0.0     82
NaN      10
Name: recode, dtype: int64


     total_bill   tip  sex smoker   day    time  size  recode
13        18.43  3.00  NaN     No   Sun  Dinner   4.0     NaN
28        21.70  4.30  NaN     No   Sat     NaN   2.0     NaN
117       10.65  1.50  NaN     No  Thur   Lunch   2.0     NaN
135        8.51  1.25  NaN     No  Thur   Lunch   2.0     NaN
145        8.35  1.50  NaN     No  Thur     NaN   2.0     NaN
________________________________________________________
IPYTHONSHELL:

In [1]: tips.shape
Out[1]: (244, 7)

In [2]: tips.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 244 entries, 0 to 243
Data columns (total 7 columns):
total_bill    202 non-null float64
tip           220 non-null float64
sex           234 non-null object
smoker        229 non-null object
day           243 non-null object
time          227 non-null object
size          231 non-null float64
dtypes: float64(3), object(4)
memory usage: 13.4+ KB

In [3]: tips.head()
Out[3]: 
   total_bill   tip     sex smoker  day    time  size
0       16.99  1.01  Female     No  Sun  Dinner   2.0
1       10.34  1.66    Male     No  Sun  Dinner   3.0
2         NaN  3.50    Male     No  Sun  Dinner   3.0
3         NaN  3.31    Male     No  Sun  Dinner   2.0
4       24.59  3.61  Female     No  Sun  Dinner   4.0
________________________________________________________
INSTRUCTION:
1. Define a function named recode_gender() that has 
   one parameter: gender.
   * If gender equals 'Male', return 1.
   * Else, if gender equals 'Female', return 0.
   * If gender does not equal 'Male' or 'Female', 
     return np.nan. NumPy has been pre-imported 
     for you.
2. Apply your recode_gender() function over tips.sex 
   using the .apply() method to create a new column: 
   'recode'. Note that when passing in a function 
   inside the .apply() method, you don't need to 
   specify the parentheses after the function name.
3. Hit 'Submit Answer' and take note of the new 
   'gender_recode' column in the tips DataFrame!
________________________________________________________
GUIDE:
Custom functions to clean data
You'll now practice writing functions to clean data.

The tips dataset has been pre-loaded into a DataFrame 
called tips. It has a 'sex' column that contains the 
values 'Male' or 'Female'. Your job is to write a 
function that will recode 'Female' to 0, 'Male' to 1, 
and return np.nan for all entries of 'sex' that are 
neither 'Female' nor 'Male'.

Recoding variables like this is a common data 
cleaning task. Functions provide a mechanism for 
you to abstract away complex bits of code as well 
as reuse code. This makes your code more readable 
and less error prone.

As Dan showed you in the videos, you can use the 
.apply() method to apply a function across entire 
rows or columns of DataFrames. However, note that 
each column of a DataFrame is a pandas Series. 
Functions can also be applied across Series. Here, 
you will apply your function over the 'sex' column.
________________________________________________________
