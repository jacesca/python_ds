# Pivot table the airquality_dup: airquality_pivot
airquality_pivot = airquality_dup.pivot_table(index=["Month", "Day"], columns="measurement", values="reading", aggfunc=np.mean)

# Print the head of airquality_pivot before reset_index
print(airquality_pivot.head())

# Reset the index of airquality_pivot
airquality_pivot = airquality_pivot.reset_index()

# Print the head of airquality_pivot
print(airquality_pivot.head())

# Print the head of airquality
print(airquality.head())
________________________________________________________
OUT:
measurement  Ozone  Solar.R  Temp  Wind
Month Day                              
5     1       41.0    190.0  67.0   7.4
      2       36.0    118.0  72.0   8.0
      3       12.0    149.0  74.0  12.6
      4       18.0    313.0  62.0  11.5
      5        NaN      NaN  56.0  14.3

measurement  Month  Day  Ozone  Solar.R  Temp  Wind
0                5    1   41.0    190.0  67.0   7.4
1                5    2   36.0    118.0  72.0   8.0
2                5    3   12.0    149.0  74.0  12.6
3                5    4   18.0    313.0  62.0  11.5
4                5    5    NaN      NaN  56.0  14.3

   Ozone  Solar.R  Wind  Temp  Month  Day
0   41.0    190.0   7.4    67      5    1
1   36.0    118.0   8.0    72      5    2
2   12.0    149.0  12.6    74      5    3
3   18.0    313.0  11.5    62      5    4
4    NaN      NaN  14.3    56      5    5
________________________________________________________
IPYTHONSHELL:
In [1]: airquality_dup.shape
Out[1]: (1224, 4)

In [2]: airquality_melt.shape
Out[2]: (612, 4)
________________________________________________________
INSTRUCTION:
1. Pivot airquality_dup by using .pivot_table() with 
   the rows indexed by 'Month' and 'Day', the columns 
   indexed by 'measurement', and the values populated 
   with 'reading'. Use np.mean for the aggregation 
   function.
2. Print the head of airquality_pivot.
3. Flatten airquality_pivot by resetting its index.
4. Print the head of airquality_pivot and then the 
   original airquality DataFrame to compare their 
   structure.
________________________________________________________
GUIDE:
Pivoting duplicate values
So far, you've used the .pivot_table() method when 
there are multiple index values you want to hold 
constant during a pivot. In the video, Dan showed 
you how you can also use pivot tables to deal with 
duplicate values by providing an aggregation function 
through the aggfunc parameter. Here, you're going to 
combine both these uses of pivot tables.

Let's say your data collection method accidentally 
duplicated your dataset. Such a dataset, in which 
each row is duplicated, has been pre-loaded as 
airquality_dup. In addition, the airquality_melt 
DataFrame from the previous exercise has been 
pre-loaded. Explore their shapes in the IPython 
Shell by accessing their .shape attributes to 
confirm the duplicate rows present in airquality_dup.

You'll see that by using .pivot_table() and the aggfunc
________________________________________________________
