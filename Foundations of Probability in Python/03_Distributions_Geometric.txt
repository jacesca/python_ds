# -*- coding: utf-8 -*-
"""
Created on Mon Mar 30 10:40:32 2020

@author: jacqueline.cortez
Subject: Practicing Statistics Interview Questions in Python
Chapter 4: Probability meets statistics
    No that you know how to calculate probabilities and important properties of probability 
    distributions, we'll introduce two important results: the law of large numbers and the 
    central limit theorem. This will expand your understanding on how the sample mean 
    converges to the population mean as more data is available and how the sum of random 
    variables behaves under certain conditions. We will also explore connections between 
    linear and logistic regressions as applications of probability and statistics in data 
    science.
"""

print("****************************************************")
print("** BEGIN                                          **")
print("****************************************************")
topic = "Importing libraries"; print("** %s\n" % topic)

import numpy                         as np                                    #For making operations in lists
import matplotlib.pyplot             as plt                                   #For creating charts
import seaborn                       as sns                                   #For visualizing data

from scipy.stats                     import geom                              #Generate gometric distribution

print("****************************************************")
topic = "Preparing the environment"; print("** %s\n" % topic)

SEED = 13
np.random.seed(SEED) 

def geometric_distplot(p, SEED, size=10000): 
    """Make a poisson graph. Parameter needed:
        p    --> Geometric probability.
        SEED --> Random seed.
        size --> 10,000 by default. Size of the sample to plot.
    Return sample of the poisson distribution with the mu defined."""
    sample = geom.rvs(p=p, size=size, random_state=SEED)
    
    #Plot the sample
    sns.distplot(sample, kde=False, bins=np.linspace(1,21,22))
    plt.xlabel('k (Sample)'); plt.ylabel('Frequency (p={})'.format(p)); # Labeling the axis.
    return sample

def geometric_pmf(p, SEED, size=10000, y_text=0.005, text_percent=True, x_max=15): 
    """Make a poisson graph. Parameter needed:
        p            --> Geometric probability.
        SEED         -->Random seed.
        size         -->10,000 by default. Size of the sample to plot.
        y_text       -->the height add to y for printing the pmf in the plot.
        text_percent --> Show percents of values (True or False).
    Return sample of the poisson distribution with the mu defined and its pmf."""
    sample = geom.rvs(p=p, size=size, random_state=SEED) #if sample.size == 0 else sample
    #x, freq = np.unique(sample, return_counts=True)
    x        = np.unique(sample)
    y        = geom.pmf(x, p)
    x_max    = x_max if len(x)>x_max else len(x)
    
    #Plot the sample
    plt.bar(x[:x_max], y[:x_max])
    plt.xticks(x[:x_max])
    plt.xlabel('First {} items from k (Sample)'.format(x_max), color='darkblue'); plt.ylabel('geom.pmf(k, p={})'.format(p), color='darkblue'); # Labeling the axis.
    if text_percent:
        for value, percent in zip(x[:x_max], y[:x_max]):
            plt.text(value, percent+y_text, "{:,.1%}".format(percent), fontsize=7, ha='center', color='darkblue')
    return x, y

def geometric_cdf(p, SEED, size=10000, y_text=0.005, text_percent=True, x_max=15): 
    """Make a poisson graph. Parameter needed:
        p            --> Geometric probability.
        SEED         -->Random seed.
        size         -->10,000 by default. Size of the sample to plot.
        y_text       -->the height add to y for printing the pmf in the plot.
        text_percent --> Show percents of values (True or False).
    Return sample of the poisson distribution with the mu defined and its cdf."""
    sample = geom.rvs(p=p, size=size, random_state=SEED) #if sample.size == 0 else sample
    #x, freq = np.unique(sample, return_counts=True)
    x        = np.unique(sample)
    y        = geom.cdf(x, p)
    x_max    = x_max if len(x)>x_max else len(x)
    
    #Plot the sample
    plt.bar(x[:x_max], y[:x_max])
    plt.xticks(x[:x_max])
    plt.xlabel('First {} items from k (Sample)'.format(x_max), color='darkblue'); plt.ylabel('geom.cdf(k, p={})'.format(p), color='darkblue'); # Labeling the axis.
    if text_percent:
        for value, percent in zip(x[:x_max], y[:x_max]):
            plt.text(value, percent+y_text, "{:,.1%}".format(percent), fontsize=7, ha='center', color='darkblue')
    return x, y

def geometric_sf(p, SEED, size=10000, y_text=0.005, text_percent=True, x_max=15): 
    """Make a poisson graph. Parameter needed:
        p            --> Geometric probability.
        SEED         -->Random seed.
        size         -->10,000 by default. Size of the sample to plot.
        y_text       -->the height add to y for printing the pmf in the plot.
        text_percent --> Show percents of values (True or False).
    Return sample of the poisson distribution with the mu defined and its sf."""
    sample = geom.rvs(p=p, size=size, random_state=SEED) #if sample.size == 0 else sample
    #x, freq = np.unique(sample, return_counts=True)
    x        = np.unique(sample)
    y        = geom.sf(x, p)
    x_max    = x_max if len(x)>x_max else len(x)
    
    #Plot the sample
    plt.bar(x[:x_max], y[:x_max])
    plt.xticks(x[:x_max])
    plt.xlabel('First {} items from k (Sample)'.format(x_max), color='darkblue'); plt.ylabel('geom.sf(k, p={})'.format(p), color='darkblue'); # Labeling the axis.
    if text_percent:
        for value, percent in zip(x[:x_max], y[:x_max]):
            plt.text(value, percent+y_text, "{:,.1%}".format(percent), fontsize=7, ha='center', color='darkblue')
    return x, y


print("****************************************************")
topic = "13. Geometric distributions"; print("** %s\n" % topic)

p = 0.3; #probabilities of scoring a free throw

#Plot the geometric distribution sample
geometric_distplot(p, SEED)
plt.title("Scoring obtained in k attemps (Using distplot)", color='red')
plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=.15, bottom=None, right=None, top=.85, wspace=.5, hspace=None);
plt.show()

#Plot the pmf of the geometric distribution sample
plt.figure()
geometric_pmf(p, SEED)
plt.title("Scoring obtained in k attemps (PMF)", color='red')
plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=.15, bottom=None, right=None, top=.85, wspace=.5, hspace=None);
plt.show()

#Plot the cdf of the geometric distribution sample
plt.figure()
geometric_cdf(p, SEED)
plt.title("Scoring obtained in k attemps (CDF)", color='red')
plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=.15, bottom=None, right=None, top=.85, wspace=.5, hspace=None);
plt.show()

#Plot the sf of the geometric distribution sample
plt.figure()
geometric_sf(p, SEED)
plt.title("Scoring obtained in k attemps (SF)", color='red')
plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=.15, bottom=None, right=None, top=.85, wspace=.5, hspace=None);
plt.show()


print("If we know that a basketball player has a 0.3 probabilities of scoring a free throw, what is the probability of missing the first throw and scoring the second?")
k = 2;
probability = geom.pmf(k, p)
print("{:,.2%}\n".format(probability))

print("What is the probability of a basketball player scoring a free throw in 4 or fewer attemps?")
k = 4;
probability = geom.cdf(k, p)
print("{:,.2%}\n".format(probability))

print("What is the probability of the player scoring in more than 2 free throws?")
k = 2;
probability = geom.sf(k, p)
print("{:,.2%}\n".format(probability))

print("What is the value where you accumulate 0.6 probability?")
q = 0.6;
attempts = geom.ppf(q, p)
print("{:,.1f} attempts.\n".format(attempts))


print("****************************************************")
topic = "14. Catching salmon example"; print("** %s\n" % topic)

p = 0.0333; #Probability of success in grizzly bears' attempting to catch a fish

#Plot the pmf of the geometric distribution sample
plt.rc('xtick',labelsize=6); plt.rc('ytick',labelsize=6);
plt.rcParams.update({'axes.labelsize': 7})
plt.figure(figsize=(11,3.5))
plt.subplot(1, 3, 1)
geometric_pmf(p, SEED, text_percent=False)
plt.title("PMF", color='red')

#Plot the cdf of the geometric distribution sample
plt.subplot(1, 3, 2)
geometric_cdf(p, SEED, text_percent=False)
plt.title("CDF", color='red')

#Plot the sf of the geometric distribution sample
plt.subplot(1, 3, 3)
geometric_sf(p, SEED, text_percent=False)
plt.title("SF", color='red')

plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=None, bottom=.2, right=None, top=.8, wspace=.3, hspace=None);
plt.show()
plt.style.use('default')

print("Calculate and print the probability that the bear will catch a salmon on its third attempt, after failing two times.")
k=3
probability = geom.pmf(k, p)
print("{:,.2%}\n".format(probability))

print("Calculate and print the probability that the bear will get a salmon in less than 5 attempts.")
k=4
probability = geom.cdf(k, p)
print("{:,.2%}\n".format(probability))

print("Calculate and print the probability that the bear will get a salmon in less than 21 attempts.")
k=20
probability = geom.cdf(k, p)
print("{:,.2%}\n".format(probability))

print("Calculate and print how many attempts the bear has to make to have a 0.9 probability of catching a salmon.")
q=0.9
attempts = geom.ppf(q, p)
print("{:,.1f} attempts.\n".format(attempts))


print("****************************************************")
topic = "15. Free throws example"; print("** %s\n" % topic)

print("What is the probability of them missing with the first throw and scoring with the second?")
probability = geom.pmf(k=2, p=.3)
print("{:,.2%}\n".format(probability))


print("****************************************************")
print("** END                                            **")
print("****************************************************")
