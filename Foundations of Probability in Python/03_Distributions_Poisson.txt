# -*- coding: utf-8 -*-
"""
Created on Mon Mar 30 10:40:32 2020

@author: jacqueline.cortez
Subject: Practicing Statistics Interview Questions in Python
Chapter 3: Important probability distributions
    Until now we've been working with binomial distributions, but there are many probability 
    distributions a random variable can take. In this chapter we'll introduce three more that 
    are related to the binomial distribution: the normal, Poisson, and geometric distributions.
"""

print("****************************************************")
print("** BEGIN                                          **")
print("****************************************************")
topic = "Importing libraries"; print("** %s\n" % topic)

import numpy                         as np                                    #For making operations in lists
import matplotlib.pyplot             as plt                                   #For creating charts
import seaborn                       as sns                                   #For visualizing data

from scipy.stats                     import poisson                           #To generate poisson distribution.

print("****************************************************")
topic = "Preparing the environment"; print("** %s\n" % topic)

SEED = 13
np.random.seed(SEED) 

def poisson_distplot(mu, SEED, size=10000, width=.7): 
    """Make a poisson graph. Parameter needed:
        mu   -->Poisson parameter.
        SEED -->Random seed.
        size -->10,000 by default. Size of the sample to plot.
        width-->0.7 by default. Width of the bar in the graph
    Return sample of the poisson distribution with the mu defined."""
    sample = poisson.rvs(mu=mu, size=size, random_state=SEED)
    mean   = np.mean(sample)
    median = np.median(sample)
    x      = np.unique(sample)
    
    #Plot the sample
    sns.distplot(sample, kde=False, hist_kws={"width":width})
    plt.xticks(x)
    plt.xlabel('k (Sample)'); plt.ylabel('Frequency (mu={})'.format(mu)); # Labeling the axis.
    plt.axvline(x=mean, color='b', label='Mean', linestyle='-', linewidth=2)
    plt.axvline(x=median, color='r', label='Median', linestyle='--', linewidth=2) # Add vertical lines for the median and mean
    plt.legend(loc='best', fontsize='small')
    return sample


def poisson_plot(mu, SEED, size=10000): #, sample=np.array([])): 
    """Make a poisson graph. Parameter needed:
        mu    -->Poisson parameter.
        SEED  -->Random seed.
        size  -->10,000 by default. Size of the sample to plot.
        sample-->If not given, the function will generete it.
    Return sample of the poisson distribution with the mu defined and its pmf."""
    #sample   = poisson.rvs(mu=mu, size=size, random_state=SEED) if sample.size == 0 else sample
    sample   = poisson.rvs(mu=mu, size=size, random_state=SEED)
    mean     = np.mean(sample)
    median   = np.median(sample)
    #x, freq = np.unique(sample, return_counts=True)
    x        = np.unique(sample)
    y        = poisson.pmf(x, mu)
    
    #Plot the sample
    plt.plot(x, y, 'ko', ms=8)
    plt.vlines(x=x, ymin=0, ymax=y, colors='k', linestyles='-', lw=3)
    plt.xticks(x)
    plt.xlabel('k (Sample)'); plt.ylabel('poisson.pmf(k, mu={})'.format(mu)); # Labeling the axis.
    plt.axvline(x=mean, color='b', label='Mean', linestyle='-', linewidth=2)
    plt.axvline(x=median, color='r', label='Median', linestyle='--', linewidth=2) # Add vertical lines for the median and mean
    plt.legend(loc='best', fontsize='small')
    return x, y


def poisson_bar(mu, SEED, size=10000, y_text=0.001, text_percent=True): 
    """Make a poisson graph. Parameter needed:
        mu    -->Poisson parameter.
        SEED  -->Random seed.
        size  -->10,000 by default. Size of the sample to plot.
        sample-->If not given, the function will generete it.
        y     -->pmf of the sample.
        y_text-->the height add to y for printing the pmf in the plot.
    Return sample of the poisson distribution with the mu defined and its pmf."""
    sample = poisson.rvs(mu=mu, size=size, random_state=SEED) #if sample.size == 0 else sample
    mean     = np.mean(sample)
    median   = np.median(sample)
    #x, freq = np.unique(sample, return_counts=True)
    x        = np.unique(sample)
    y        = poisson.pmf(x, mu)
    
    #Plot the sample
    plt.bar(x, y)
    plt.xticks(x)
    plt.xlabel('k (Sample)'); plt.ylabel('poisson.pmf(k, mu={})'.format(mu)); # Labeling the axis.
    plt.axvline(x=mean, color='b', label='Mean', linestyle='-', linewidth=2)
    plt.axvline(x=median, color='r', label='Median', linestyle='--', linewidth=2) # Add vertical lines for the median and mean
    plt.legend(loc='best', fontsize='small')
    if text_percent:
        for value, percent in zip(x, y):
            plt.text(value, percent+y_text, "{:,.2%}".format(percent), fontsize=8, ha='center')
    return x, y




print("****************************************************")
topic = "9. Poisson distributions"; print("** %s\n" % topic)

#Plot the sample
plt.figure(figsize=(10,5))
plt.subplot(2,2,1)
mu=0.8
poisson_bar(mu=mu, SEED=SEED, text_percent=False)
plt.xticks(fontsize=7); plt.yticks(fontsize=8);
plt.title("mu={:,.2f}".format(mu), color='red')
plt.subplot(2,2,2)
mu=1.8
poisson_bar(mu=mu, SEED=SEED, text_percent=False)
plt.xticks(fontsize=7); plt.yticks(fontsize=8);
plt.title("mu={:,.2f}".format(mu), color='red')
plt.subplot(2,2,3)
mu=3.0
poisson_bar(mu=mu, SEED=SEED, text_percent=False)
plt.xticks(fontsize=7); plt.yticks(fontsize=8);
plt.title("mu={:,.2f}".format(mu), color='red')
plt.subplot(2,2,4)
mu=6.0
poisson_bar(mu=mu, SEED=SEED, text_percent=False)
plt.xticks(fontsize=7); plt.yticks(fontsize=8);
plt.title("mu={:,.2f}".format(mu), color='red')
plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=.15, bottom=None, right=None, top=None, wspace=.5, hspace=.5);
plt.show()

#Sample generation
mu = 2.2 #Average number of calls per minute

#Plot the sample, first choice
plt.figure()
sample = poisson_distplot(mu=mu, SEED=SEED)
plt.title("Calls per minute (using displot)", color='red')
plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=.15, bottom=None, right=None, top=.85, wspace=.5, hspace=None);
plt.show()

#Plot the sample, second choice
plt.figure()
sample, y = poisson_plot(mu, SEED)
plt.title("Calls per minute (using plot)", color='red')
plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=.15, bottom=None, right=None, top=.85, wspace=.5, hspace=None);
plt.show()

#Plot the sample, third choice
plt.figure()
poisson_bar(mu, SEED)
plt.title("Calls per minute (using bar)", color='red')
plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=.15, bottom=None, right=None, top=.85, wspace=.5, hspace=None);
plt.show()


print("What is the probability of having 3 calls in a minute?")
# Calculate the probability mass
probability = poisson.pmf(k=3, mu=mu)
print("{:,.2%}".format(probability))

print("\nWhat is the probability of having no calls in a minute?")
# Calculate the probability mass
probability = poisson.pmf(k=0, mu=mu)
print("{:,.2%}".format(probability))

print("\nWhat is the probability of having 6 calls in a minute?")
# Calculate the probability mass
probability = poisson.pmf(k=6, mu=mu)
print("{:,.2%}".format(probability))

print("\nWhat is the probability of having 2 or less calls in a minute?")
# Calculate the probability mass
probability = poisson.cdf(k=2, mu=mu)
print("{:,.2%}".format(probability))

print("\nWhat is the probability of having 5 or less calls in a minute?")
# Calculate the probability mass
probability = poisson.cdf(k=5, mu=mu)
print("{:,.2%}".format(probability))

print("\nWhat is the probability of having more than 2 calls in a minute?")
# Calculate the probability mass
probability = poisson.sf(k=2, mu=mu)
print("{:,.2%}".format(probability))

print("\nHow many calls accumulates 50% of probability?")
# Calculate the probability mass
probability = poisson.ppf(q=.5, mu=mu)
print("{:,.2f}".format(probability))

print("****************************************************")
topic = "10. ATM example"; print("** %s\n" % topic)

mu = 1 #Average number of calls per minute

#Plot the sample
plt.figure()
poisson_bar(mu, SEED)
plt.title("Average number of customers at ATM per minute", color='red')
plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=.15, bottom=None, right=None, top=.85, wspace=.5, hspace=None);
plt.show()

print("Calculate the probability of having more than one customer visiting the ATM in this 5-minute period.")
# Probability of more than 1 customer
probability = poisson.sf(k=1, mu=mu)
# Print the result
print("{:,.2%}".format(probability))


print("****************************************************")
topic = "11. Highway accidents example"; print("** %s\n" % topic)

mu = 2 #Average number of accidents per day

#Plot the sample
plt.figure()
poisson_bar(mu, SEED)
plt.title("Number of accidents per day", color='red')
plt.suptitle(topic, color='navy');  # Setting the titles.
plt.subplots_adjust(left=.15, bottom=None, right=None, top=.85, wspace=.5, hspace=None);
plt.show()


print("Determine and print the probability of there being 5 accidents on any day.")
P_five_accidents = poisson.pmf(k=5, mu=mu)   # Probability of 5 accidents any day
print("{:,.2%}\n".format(P_five_accidents)) # Print the result

print("Determine and print the probability of having 4 or 5 accidents on any day.")
P_four_accident = poisson.pmf(k=4, mu=mu)
P_five_accidents = poisson.pmf(k=5, mu=mu)
print("{:,.2%}\n".format(P_four_accident + P_five_accidents))

print("Determine and print the probability of having more than 3 accidents on any day.")
P_more_than_3 = poisson.sf(k=3, mu=mu) # Probability of more than 3 accidents any day
print("{:,.2%}\n".format(P_more_than_3))

print("Determine and print the number of accidents that is likely to happen with 0.75 probability.")
accidents = poisson.ppf(q=.75, mu=mu) # Number of accidents with 0.75 probability
print("{:,.1f} accidentes per day\n".format(accidents))


print("****************************************************")
print("** END                                            **")
print("****************************************************")
