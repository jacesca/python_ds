# -*- coding: utf-8 -*-
"""
Created on Sun Sep  8 23:28:19 2019

@author: jacqueline.cortez

Chapter 3. Going Deeper
Introduction:
    Convolutional neural networks gain a lot of power when they are constructed with multiple layers (deep networks). 
    In this chapter, you will learn how to stack multiple convolutional layers into a deep network. You will also learn 
    how to keep track of the number of parameters, as the network grows, and how to control this number.
"""
import numpy             as np                                                #For making operations in lists
import matplotlib.pyplot as plt                                               #For creating charts
import tensorflow as tf                                                       #For DeapLearning

from keras.callbacks                 import EarlyStopping                     #For DeapLearning
from keras.layers                    import Conv2D                            #For DeapLearning
from keras.layers                    import Dense                             #For DeapLearning
from keras.layers                    import Flatten                           #For DeapLearning
from keras.layers                    import MaxPool2D                         #For DeapLearning
from keras.models                    import Sequential                        #For DeapLearning
from keras.optimizers                import Adam                              #For DeapLearning
from keras.utils                     import plot_model                        #For DeapLearning
from keras.utils                     import to_categorical                    #For DeapLearning




print("****************************************************")
print("** BEGIN                                          **")
print("****************************************************")
print("** User defined variables \n")

SEED=1
np.random.seed(SEED)
tf.set_random_seed(SEED)

#print("****************************************************")
print("** User Functions\n")

def rgb2gray(rgb):
    return np.dot(rgb[:,:,:3], [0.2989, 0.5870, 0.1140])

#print("****************************************************")
print("** Getting the data for this program\n")

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
img_rows, img_cols = 28, 28
mnist = tf.keras.datasets.fashion_mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0 #Data normalization

plt.pcolor(x_train[10],  cmap='gray') # Visualize the result
plt.gca().invert_yaxis()
plt.title('Figure 1')
plt.suptitle("0. Fashion MNIST Database")
plt.gca().set_aspect('equal', adjustable='box')
plt.show()

plt.figure(figsize=(6,6))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(x_train[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[y_train[i]])
plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0.3, hspace=0.3)
plt.suptitle("0. Fashion MNIST Database")
plt.show()

print("****************************************************")
tema = "1. Going deeper"; print("** %s\n" % tema)

train_data   = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
train_labels = to_categorical(y_train, len(class_names))
test_data    = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
test_labels  = to_categorical(y_test, len(class_names))

model = Sequential() # Initialize the model
model.add(Conv2D(64, kernel_size=2, activation='relu', input_shape=(img_rows, img_cols, 1), padding='same', name='Input')) # Add the convolutional layer
model.add(Conv2D(64, kernel_size=2, activation='relu', name='Conv2D')) # Add the convolutional layer
model.add(Flatten(name='Flatten')) # Feed into output layer
model.add(Dense(10, activation='softmax', name='Output'))

print(model.summary())
plot_model(model, to_file='03_01_model.png', show_shapes=False, show_layer_names=True, rankdir='TB') # rankdir='TB' makes vertical plot and rankdir='LR' creates a horizontal plot

# Plotting the model
plt.figure()
data = plt.imread('03_01_model.png') # Display the image
plt.imshow(data)
plt.title('A MNIST case in a Neural Red')
plt.suptitle(tema)
#plt.subplots_adjust(left=0.2, bottom=None, right=None, top=0.88, wspace=0.3, hspace=None)
plt.show()

model.compile(optimizer=Adam(lr=0.01), loss='categorical_crossentropy', metrics=['accuracy']) # Compile the model
model.fit(train_data, train_labels,  
          epochs=10, verbose=True, validation_split=.20, batch_size=64, callbacks=[EarlyStopping(patience=2)]) # Fit the model
print(model.evaluate(test_data, test_labels, batch_size=10)) # Evaluate the model on separate test data

print("****************************************************")
tema = "2. Creating a deep learning network"; print("** %s\n" % tema)

model = Sequential()
model.add(Conv2D(64, kernel_size=2, activation='relu', input_shape=(img_rows, img_cols, 1), name='Input')) # Add a convolutional layer (15 units)
model.add(Conv2D(20, kernel_size=2, activation='relu', name='Conv2D')) # Add another convolutional layer (5 units)
model.add(Flatten(name='Flatten')) # Flatten and feed to output layer
model.add(Dense(10, activation='softmax', name='Output'))

print(model.summary())

print("****************************************************")
tema = "3. Train a deep CNN to classify clothing images"; print("** %s\n" % tema)

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) # Compile model
model.fit(train_data, train_labels, validation_split=0.2, epochs=10, batch_size=64) # Fit the model to training data 
print(model.evaluate(test_data, test_labels, batch_size=64)) # Evaluate the model on test data

print("****************************************************")
tema = "7. How many parameters in a deep CNN?"; print("** %s\n" % tema)

# CNN model
model = Sequential()
model.add(Conv2D(64, kernel_size=2, activation='relu', input_shape=(28, 28, 1)))
model.add(Conv2D(64, kernel_size=2, activation='relu'))
model.add(Flatten())
model.add(Dense(10, activation='softmax'))

# Summarize the model 
print(model.summary())

print("****************************************************")
tema = "9. Write your own pooling operation"; print("** %s\n" % tema)

data = plt.imread('bricks.png') # Load the image
im   = rgb2gray(data)

plt.figure()
plt.pcolor(im,  cmap='gray') # Visualize the result
plt.title('bricks.png (Original image)')
plt.suptitle(tema)
plt.show()

# Result placeholder
result = np.zeros((im.shape[0]//2, im.shape[1]//2))

# Pooling operation
for ii in range(result.shape[0]):
    for jj in range(result.shape[1]):
        result[ii, jj] = np.max(im[ii*2:ii*2+2, jj*2:jj*2+2])
        
plt.figure()
plt.pcolor(result,  cmap='gray') # Visualize the result
plt.title('bricks.png (After pooling)')
plt.suptitle(tema)
plt.show()

print("****************************************************")
tema = "10. Keras pooling layers"; print("** %s\n" % tema)


model = Sequential()
model.add(Conv2D(64, kernel_size=2, activation='relu', input_shape=(img_rows, img_cols, 1), name='Input')) # Add a convolutional layer (15 units)
model.add(MaxPool2D(2, name='MaxPool2D-1')) # Add a pooling operation
model.add(Conv2D(20, kernel_size=2, activation='relu', name='Conv2D')) # Add another convolutional layer (5 units)
model.add(Flatten(name='Flatten')) # Flatten and feed to output layer
model.add(Dense(10, activation='softmax', name='Output'))

print(model.summary())

print("****************************************************")
tema = "11. Train a deep CNN with pooling to classify images"; print("** %s\n" % tema)

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) # Compile model
model.fit(train_data, train_labels, validation_split=0.2, epochs=10, batch_size=64) # Fit the model to training data 
print(model.evaluate(test_data, test_labels, batch_size=64)) # Evaluate the model on test data

print("****************************************************")
print("** END                                            **")
print("****************************************************")