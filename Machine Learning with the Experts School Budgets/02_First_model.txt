# -*- coding: utf-8 -*-
"""
Created on Sat Aug 10 22:04:01 2019

@author: jacqueline.cortez

Cap√≠tulo 2. Creating a simple first model
Introduction:
    In this chapter, you'll build a first-pass model. You'll use numeric data only to train the model. 
    Spoiler alert - throwing out all of the text data is bad for performance! But you'll learn how to format 
    your predictions. Then, you'll be introduced to natural language processing (NLP) in order to start working 
    with the large amounts of text in the data.
"""
import pandas as pd                                                                 #For loading tabular data
import numpy as np                                                                  #For making operations in lists
import warnings


from sklearn.feature_extraction.text import CountVectorizer                         #For learning machine
from sklearn.linear_model import LogisticRegression                                 #For learning machine
from sklearn.multiclass import OneVsRestClassifier                                   #For learning machine
import multilabel                                                                   #For multivariable target, function created by Datacamp
import multi_log_loss                                                               #Datacamp logloss for multiple targets score







print("****************************************************")
print("** BEGIN                                          **")
print("****************************************************")
print("** Getting the data for this program\n")

def compute_log_loss(predicted, actual, eps=1e-14):
    """ Computes the logarithmic loss between predicted and actual when these are 1D arrays.
    
        :param predicted: The predicted probabilities as floats between 0-1.
        :param actual: The actual binary labels. Either 0 or 1.
        :param eps (optional): log(0) is inf, so we need to offset our predicted values slightly by eps from 0 or 1.
    """
    predicted = np.clip(predicted, eps, 1-eps)
    loss = -1*np.mean(actual*np.log(predicted) + (1-actual)*np.log(1-predicted))
    return loss


#def combine_text_columns(data_frame, to_drop=NUMERIC_COLUMNS + LABELS):
def combine_text_columns(data_frame, to_drop): # Define combine_text_columns()
    """ converts all text in each row of data_frame to single vector """ 
    
    to_drop = set(to_drop) & set(data_frame.columns.tolist()) # Drop non-text columns that are in the df
    text_data = data_frame.drop(to_drop, axis=1)
    text_data.fillna('', inplace=True) # Replace nans with blanks
        
    return text_data.apply(lambda x: " ".join(x), axis=1) # Join all text items in a row that have a space in between
    


LABELS                   = ['Function', 'Use', 'Sharing', 'Reporting', 'Student_Type', 'Position_Type', 'Object_Type', 'Pre_K', 'Operating_Status']
NUMERIC_COLUMNS          = ['FTE', 'Total']
BOX_PLOTS_COLUMN_INDICES = [range(37), range(37,48), range(48,51), range(51,76), range(76,79), range(79,82), range(82,87), range(87,96), range(96,104)]
PATH_TO_PREDICTIONS      = 'predictions.csv'
PATH_TO_HOLDOUT_LABELS   = 'TestSetLabelsSample.csv'
TOKENS_ALPHANUMERIC      = '[A-Za-z0-9]+(?=\\s+)' # Create the token pattern: TOKENS_ALPHANUMERIC
TOKENS_BASIC             = '\\S+(?=\\s+)' # Create the basic token pattern


file = "TrainingSetSample.csv" 
budget_df = pd.read_csv(file, index_col=0)

categorize_label = lambda x: x.astype('category') # Define the lambda function: categorize_label
budget_df[LABELS] = budget_df[LABELS].apply(categorize_label, axis=0) # Convert df[LABELS] to a categorical type


# Load the holdout data: holdout
file = "TestSetSample.csv"
holdout = pd.read_csv(file, index_col=0)



print("****************************************************")
tema = '2. Setting up a train-test split in scikit-learn'; print("** %s\n" % tema)

numeric_data_only = budget_df[NUMERIC_COLUMNS].fillna(-1000) # Create the new DataFrame: numeric_data_only
label_dummies = pd.get_dummies(budget_df[LABELS], prefix_sep='__') # Get labels and convert to dummy variables: label_dummies

warnings.filterwarnings('ignore', 'Size less than number of columns*') #To avoid the warning, review https://github.com/scikit-learn/scikit-learn/issues/13394
X_train, X_test, y_train, y_test = multilabel.multilabel_train_test_split(numeric_data_only, label_dummies,  size=0.2, seed=123) # Create training and test sets
warnings.filterwarnings('default', 'Size less than number of columns*') #To avoid the warning, review https://github.com/scikit-learn/scikit-learn/issues/13394


# Print the info
print("X_train info:"); print(X_train.info())
print("\nX_test info:"); print(X_test.info())
print("\ny_train info:"); print(y_train.info())
print("\ny_test info:"); print(y_test.info())


print("****************************************************")
tema = '3. Training a model'; print("** %s\n" % tema)

clf = OneVsRestClassifier(LogisticRegression(solver='liblinear')) # Instantiate the classifier: clf
clf.fit(X_train, y_train) # Fit the classifier to the training data

print("Accuracy: {}".format(clf.score(X_test, y_test))) # Print the accuracy



print("****************************************************")
tema = '5. Use your model to predict values on holdout data'; print("** %s\n" % tema)

# Generate predictions: predictions
predictions = clf.predict_proba(holdout[NUMERIC_COLUMNS].fillna(-1000))



print("****************************************************")
tema = '6. Writing out your results to a csv for submission'; print("** %s\n" % tema)

prediction_df = pd.DataFrame(columns=pd.get_dummies(budget_df[LABELS], prefix_sep='__').columns, index=holdout.index, data=predictions) # Format predictions in DataFrame: prediction_df
prediction_df.to_csv(PATH_TO_PREDICTIONS) # Save prediction_df to csv
score = multi_log_loss.score_submission(pred_path=PATH_TO_PREDICTIONS, holdout_path=PATH_TO_HOLDOUT_LABELS, column_indices=BOX_PLOTS_COLUMN_INDICES) # Submit the predictions for scoring: score

# Print score
print('Your model, trained with numeric data only, yields logloss score: {}'.format(score))



print("****************************************************")
tema = '11. Creating a bag-of-words in scikit-learn'; print("** %s\n" % tema)

budget_df.Position_Extra.fillna('', inplace=True) # Fill missing values in df.Position_Extra
vec_alphanumeric = CountVectorizer(token_pattern=TOKENS_ALPHANUMERIC) # Instantiate the CountVectorizer: vec_alphanumeric
vec_alphanumeric.fit(budget_df.Position_Extra) # Fit to the data

# Print the number of tokens and first 15 tokens
msg = "There are {} tokens in Position_Extra if we split on non-alpha numeric"
print(msg.format(len(vec_alphanumeric.get_feature_names())))
print(vec_alphanumeric.get_feature_names())



print("****************************************************")
tema = "13. What's in a token?"; print("** %s\n" % tema)


vec_basic = CountVectorizer(token_pattern=TOKENS_BASIC) # Instantiate basic CountVectorizer: vec_basic
vec_alphanumeric = CountVectorizer(token_pattern=TOKENS_ALPHANUMERIC) # Instantiate alphanumeric CountVectorizer: vec_alphanumeric

text_vector = combine_text_columns(budget_df, to_drop=NUMERIC_COLUMNS+LABELS) # Create the text vector

vec_basic.fit_transform(text_vector) # Fit and transform vec_basic
# Print number of tokens of vec_basic
print("There are {} tokens in the dataset".format(len(vec_basic.get_feature_names())))

vec_alphanumeric.fit_transform(text_vector) # Fit and transform vec_alphanumeric
# Print number of tokens of vec_alphanumeric
print("There are {} alpha-numeric tokens in the dataset".format(len(vec_alphanumeric.get_feature_names())))



print("****************************************************")
print("** END                                            **")
print("****************************************************")